<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE chapter [
	<!ENTITY % extensions SYSTEM "../../stylesheets/macros.ent" >
	<!ENTITY % DocBookDTD PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
	"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
	<!ENTITY % entities SYSTEM "../../stylesheets/macros-en.ent" >
	%extensions;
	%DocBookDTD;
	%entities;
]>
<chapter id="chap:udm">
	<title>&ucsUDM; (<acronym>UDM</acronym>)
		<indexterm><primary>&ucsUDM;</primary><see>Directory Manager</see></indexterm>
		<indexterm><primary>Directory Manager</primary></indexterm>
		<indexterm><primary>UDM</primary><see>Directory Manager</see></indexterm>
	</title>
	<remark>PMH: Bug #31269</remark>

	<para>
		The &ucsUDM; (<acronym>UDM</acronym>) is a wrapper for <acronym>LDAP</acronym> objects.
		Traditionally <acronym>LDAP</acronym> stores objects as a collection of attributes, which are defines by so called schemata.
		Modifying entries is slightly complicated, as there are no high-level operations to add or remove values from multi-valued attributes, or to keep the password used by different authentication schemes such as Windows <acronym>NTLM</acronym>-hashes, UNIX <acronym>MD5</acronym> hashes, or Kerberos tickets in sync.
	</para>

	<section id="udm:intro">
		<title>Introduction</title>
		<para>
			The command line client <command>udm</command> provides different modes of operation.
			<cmdsynopsis>
				<command>udm</command>
				<arg choice="opt">--binddn <replaceable>bind-dn</replaceable> --bindpwd <replaceable>bind-password</replaceable></arg>
				<arg><replaceable>module</replaceable></arg>
				<arg><replaceable>mode</replaceable></arg>
				<arg choice="opt"><replaceable>options</replaceable></arg>
			</cmdsynopsis>
		</para>
		<variablelist>
			<varlistentry>
				<term>Creating object: <cmdsynopsis>
						<command>udm</command>
						<arg choice="plain"><replaceable>module</replaceable></arg>
						<arg choice="plain">create</arg>
						<arg choice="plain" rep="repeat">--set <replaceable>property</replaceable>=<replaceable>value</replaceable></arg>
					</cmdsynopsis>
				</term>
				<listitem>
					<programlisting language="sh"><![CDATA[
eval "$(ucr shell)"
udm container/ou create --position "$ldap_base" --set name="xxx"
					]]></programlisting>
					<para>
						Multiple <option>--set</option>s may be used to set the values of a multivalued property.
					</para>
					<para>
						The equivalent <acronym>LDAP</acronym> command would look like this:
					</para>
					<programlisting language="sh"><![CDATA[
eval "$(ucr shell)"
ldapadd -D "cn=admin,$ldap_base" -y /etc/ldap.secret <<__LDIF__
dn: uid=xxx,$ldap_base
objectClass: organizationalRole
cn: xxx
__LDIF__
					]]></programlisting>
				</listitem>
			</varlistentry>
		</variablelist>
		<variablelist>
			<varlistentry>
				<term>List object: <cmdsynopsis>
						<command>udm</command>
						<arg choice="plain"><replaceable>module</replaceable></arg>
						<arg choice="plain">list</arg>
						<group choice="opt">
							<arg choice="plain">--dn <replaceable>dn</replaceable></arg>
							<arg choice="plain">--filter <replaceable>property</replaceable>=<replaceable>value</replaceable></arg>
						</group>
					</cmdsynopsis>
				</term>
				<listitem>
					<programlisting language="sh"><![CDATA[
udm container/ou list --filter name="xxx"
					]]></programlisting>
					<programlisting language="sh"><![CDATA[
univention-ldapsearch cn=xxx
					]]></programlisting>
				</listitem>
			</varlistentry>
		</variablelist>
		<variablelist>
			<varlistentry>
				<term>Modify object: <cmdsynopsis>
						<command>udm</command>
						<arg choice="plain"><replaceable>module</replaceable></arg>
						<arg choice="plain">modify</arg>
						<group choice="opt">
							<arg choice="plain">--dn <replaceable>dn</replaceable></arg>
							<arg choice="plain">--filter <replaceable>property</replaceable>=<replaceable>value</replaceable></arg>
						</group>
						<group choice="opt" rep="repeat">
							<arg choice="plain">--set <replaceable>property</replaceable>=<replaceable>value</replaceable></arg>
							<arg choice="plain">--append <replaceable>property</replaceable>=<replaceable>value</replaceable></arg>
							<arg choice="plain">--remove <replaceable>property</replaceable>=<replaceable>value</replaceable></arg>
						</group>
					</cmdsynopsis>
				</term>
				<listitem>
					<programlisting language="sh"><![CDATA[
udm container/ou modify --dn "cn=xxx,$ldap_base" --set name="xxx"
					]]></programlisting>
					<para>
						For multivalued attributes <option>--append</option> and <option>--remove</option> can be used to add additional values or remove existing values.
						<option>--set</option> overwrites any previous value, but can also be used multiple times to specify further values.
						<option>--set</option> and <option>--append</option> should not be mixed for any property in one invocation.
					</para>
				</listitem>
			</varlistentry>
		</variablelist>
		<variablelist>
			<varlistentry>
				<term>Delete object: <cmdsynopsis>
						<command>udm</command>
						<arg choice="plain"><replaceable>module</replaceable></arg>
						<arg choice="plain">remove</arg>
						<group choice="opt">
							<arg choice="plain">--dn <replaceable>dn</replaceable></arg>
							<arg choice="plain">--filter <replaceable>property</replaceable>=<replaceable>value</replaceable></arg>
						</group>
					</cmdsynopsis>
				</term>
				<listitem>
					<programlisting language="sh"><![CDATA[
udm container/ou delete --dn "cn=xxx,$ldap_base"
					]]></programlisting>
					<para>
						If <option>--filter</option> is used, it must match exactly one object.
						Otherwise <command>udm</command> refuses to delete any object.
					</para>
				</listitem>
			</varlistentry>
		</variablelist>
	</section>

	<section id="udm:ea">
		<title>Packaging Extended Attributes
			<indexterm><primary>Extended Attributes</primary></indexterm>
			<indexterm><primary>Custom Attributes</primary><see>Extended Attributes</see></indexterm>
			<indexterm><primary>Directory Manager</primary><secondary>Extended Attributes</secondary><see>Extended Attributes</see></indexterm>
		</title>
		<para>
			Each <acronym>UDM</acronym> module provides a set of mappings from <acronym>LDAP</acronym> attributes to properties.
			This set is not complete, because <acronym>LDAP</acronym> objects can be extended with additional <emphasis>auxiliary objectClasses</emphasis>
			<firstterm>Extended Attributes</firstterm> can be used to extend modules to show additional properties.
			These properties can be mapped to any already defined <acronym>LDAP</acronym> attribute, but objects can also be extended by adding additional auxiliary object classes, which can provide new attributes.
		</para>
		<para>
			For packing purpose any additional LDAP schema needs to be registered on the &ucsPrimaryDN;, which is replicated from there to all other Domaincontrollers via the Listener/Notifier mechanism (see <xref linkend="chap:listener"/>).
			This is best done trough a separate schema package, which should be installed on the &ucsPrimaryDN; and &ucsBackupDN;.
			Since Extended Attributes are declared in <acronym>LDAP</acronym>, the commands to create them can be put into any join script (see <xref linkend="chap:join"/>).
			To be convenient, the declaration should be also included with the schema package, since installing it there does not require the Administrator to provide additional <acronym>LDAP</acronym> credentials.
		</para>
		<para>
			An Extended Attribute is created by using the <acronym>UDM</acronym> command line interface <command>univention-directory-manager</command> or its alias <command>udm</command>.
			The module is called <classname>settings/extended_attribute</classname>.
			Extended Attributes can be stored anywhere in the <acronym>LDAP</acronym>, but the default location would be <literal>cn=custom attributes,cn=univention,</literal> below the <acronym>LDAP</acronym> base.
			Since the join script creating the attribute may be called on multiple hosts, it is a good idea to add the <option>--ignore_exists</option> option, which suppresses the error exit code in case the object already exists in <acronym>LDAP</acronym>.
		</para>
		<para>
			The module <classname>settings/extended_attribute</classname> requires many parameters.
			They are described in <olink targetdoc="ucs-5.0" targetptr="central:extendedattrs"/>.
		</para>
		<variablelist>
			<varlistentry><term><literal>name</literal> (required)</term>
				<listitem>
					<simpara>
						Name of the attribute.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>CLIName</literal> (required)</term>
				<listitem>
					<simpara>
						An alternative name for the command line version of <acronym>UDM</acronym>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>shortDescription</literal> (required)</term>
				<listitem>
					<simpara>
						Default short description.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>translationShortDescription</literal> (optional, multiple)</term>
				<listitem>
					<simpara>
						Translation of short description.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>longDescription</literal> (required)</term>
				<listitem>
					<simpara>
						Default long description.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>translationLongDescription</literal> (optional, multiple)</term>
				<listitem>
					<simpara>
						Translation of long description.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>objectClass</literal> (required)</term>
				<listitem>
					<simpara>
						The name of an <acronym>LDAP</acronym> object class which is added to store this property.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>deleteObjectClass</literal> (optional)</term>
				<listitem>
					<simpara>
						Remove the object class when the property is unset.
						<remark>PMH: this does only work for syntax=boolean or something like that</remark>
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>ldapMapping</literal> (required)</term>
				<listitem>
					<simpara>
						The name of the <acronym>LDAP</acronym> attribute the property matches to.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>syntax</literal> (optional)</term>
				<listitem>
					<simpara>
						A syntax class, which also controls the visual representation in <acronym>UDM</acronym>.
						Defaults to <literal>string</literal>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>default</literal> (optional)</term>
				<listitem>
					<simpara>
						The default value is used when a new <acronym>UDM</acronym> object is created.
						<remark>PMH: check next</remark>
						It is also used when for an object if the option is enabled, which only then activates the property.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>valueRequired</literal> (optional)</term>
				<listitem>
					<simpara>
						A value must be entered for the property.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>multivalue</literal> (optional)</term>
				<listitem>
					<simpara>
						Controls if only a single value or multiple values can be entered.
						This must be in sync with the <literal>SINGLE-VALUE</literal> setting of the attribute in the <acronym>LDAP</acronym> schema.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>mayChange</literal> (optional)</term>
				<listitem>
					<simpara>
						The property may be modified later.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>notEditable</literal> (optional)</term>
				<listitem>
					<simpara>
						Disable all modification of the property, even when the object is first created.
						The property is only modified through hooks.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>copyable</literal> (optional)</term>
				<listitem>
					<simpara>
						Copy the value of the property when the entry is cloned.
						<remark>PMH: check next</remark>
						Otherwise the value is reset to the default value.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>hook</literal> (optional)</term>
				<listitem>
					<simpara>
						The name of a Python class implementing hook functions.
						See <xref linkend="udm:hook"/> for more information.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>doNotSearch</literal> (optional)</term>
				<listitem>
					<simpara>
						If this is enabled, the property is not show in the drop-down list of properties when searching for <acronym>UDM</acronym> objects.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>tabName</literal> (optional)</term>
				<listitem>
					<simpara>
						The name of the tab in the <acronym>UMC</acronym> where the property should be displayed.
						The name of existing tabs can be copied from <acronym>UMC</acronym> session with the <literal>English</literal> locale.
						A new tab is automatically created for new names.
						<remark>PMH: check next</remark>
						If no name is given, ???
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>translationTabName</literal> (optional, multiple)</term>
				<listitem>
					<simpara>
						Translation of tab name.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>tabPosition</literal> (optional)</term>
				<listitem>
					<simpara>
						This setting is only relevant, when a new tab is created by using a <literal>tabName</literal>, for which no tab exists.
						The integer value defines the position where the newly tab is inserted.
						By default the newly created tab is appended at the end, but before the <emphasis>Extended settings</emphasis> tab.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>overwriteTab</literal> (optional)</term>
				<listitem>
					<simpara>
						If enabled, the tab declared by the <acronym>UDM</acronym> module with the name from the <literal>tabName</literal> settings is replaces by a new clean tab with only the properties defined by Extended Attributes.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>tabAdvanced</literal> (optional)</term>
				<listitem>
					<simpara>
						If this setting is enabled, the tab is created inside the <emphasis>Extended settings</emphasis> tab instead of being a tab by its own.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>groupName</literal> (optional)</term>
				<listitem>
					<simpara>
						The name of the group inside a tab where the property should be displayed.
						The name of existing groups can be copied from <acronym>UMC</acronym> session with the <literal>English</literal> locale.
						A new tab is automatically created for new names.
						If no name is given, the property is placed before the first tab.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>translationGroupName</literal> (optional, multiple)</term>
				<listitem>
					<simpara>
						Translation of group name.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>groupPosition</literal> (optional)</term>
				<listitem>
					<simpara>
						This setting is only relevant, when a new group is created by using a <literal>groupName</literal>, for which no group exists.
						The integer value defines the position where the newly group is inserted.
						By default the newly created group is appended at the end.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>overwritePosition</literal> (optional)</term>
				<listitem>
					<simpara>
						The name of an existing property this property wants to overwrite.
						<remark>PMH: In UCS-2.x this was the position number, in UCS-3.x it must be the name</remark>
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>disableUDMWeb</literal> (optional)</term>
				<listitem>
					<simpara>
						Disables showing this property in the <acronym>UMC</acronym>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>fullWidth</literal> (optional)</term>
				<listitem>
					<simpara>
						The widget for the property should span both columns.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>module</literal> (required, multiple)</term>
				<listitem>
					<simpara>
						A list of module names where this Extended Attribute should be added to.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>options</literal> (required, multiple)</term>
				<listitem>
					<simpara>
						A list of options, which enable this Extended Attribute.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>version</literal> (required)</term>
				<listitem>
					<simpara>
						The version of the Extended Attribute format.
						The current version is <literal>2</literal>.
					</simpara>
				</listitem>
			</varlistentry>
		</variablelist>
		<tip>
			<para>
				Create the Extended Attribute first through <acronym>UMC-UDM</acronym>.
				Modify it until you're satisfied.
				Only then dump it using <command>udm settings/extended_attribute list</command> and convert the output to an equivalent shell script creating it.
			</para>
		</tip>

		<example id="udm:ea-with-schema">
			<title>Extended Attribute for custom LDAP schema</title>
			<para>
				This example provides a simple <acronym>LDAP</acronym> schema called <filename>extended-attribute.schema</filename>, which declares one object class <literal>univentionExamplesUdmOC</literal> and one attribute <literal>univentionExamplesUdmAttribute</literal>.
			</para>
			<programlisting language="sh"><xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="ea/extended-attribute.schema" parse="text"/></programlisting>
			<para>
w				The schema is shipped as <filename>/usr/share/extended-attribute/extended-attribute.schema</filename> and installed by calling <command>ucs_registerLDAPExtension</command> from the join-script <filename>50extended-attribute.inst</filename>.
			</para>
			<programlisting language="sh"><xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="ea/50extended-attribute.inst" parse="text"/></programlisting>
			<para>
				This example is deliberately missing an unjoin-script (see <xref linkend="join:unjoin"/>)  to keep this example simple.
				It should check if the Extended Attribute is no longer used in the domain and then remove it.
			</para>
		</example>

		<section id="udm:ea:select">
			<title>Selection lists
				<indexterm><primary>Extended Attributes</primary><secondary>Selection list</secondary></indexterm>
			</title>
			<para>
				Sometimes an Extended Attribute should show a list of options to choose from.
				This list can either be static or dynamic.
				After defining such a new syntax it can be used by referencing its name in the <literal>syntax</literal> property of an Extended Attribute.
			</para>
			<section id="udm:ea:select:static">
				<title>Static selections</title>
				<para>
					The static list of available selections is defined once and can not be modified interactively through <acronym>UMC</acronym>.
					Such a list is best implemented though a custom syntax class.
					As the implementation must be available on all system roles, the new syntax is best registered in <acronym>LDAP</acronym>.
					This can be done by using <command>ucs_registerLDAPExtension</command> which is described in <xref linkend="join:libraries:shell"/>.
				</para>
				<para>
					As an alternative the file can be put into the directories <filename class="directory">/usr/lib/python2.7/dist-packages/univention/admin/syntax.d/</filename> and <filename class="directory">/usr/lib/python3/dist-packages/univention/admin/syntax.d/</filename>.
				</para>
				<para>
					The following example is comparable to the default example in file <filename>/usr/lib/python3/dist-packages/univention/admin/syntax.d/example.py</filename>:
				</para>
				<programlisting language="python"><![CDATA[
class StaticSelection(select):
	choices = [
		('value1', 'Description for selection 1'),
		('value2', 'Description for selection 2'),
		('value3', 'Description for selection 3'),
	]
				]]></programlisting>
			</section>
			<section id="udm:ea:select:dynamic">
				<title>Dynamic selections</title>
				<para>
					A dynamic list is implemented as an <acronym>LDAP</acronym> search, which is described in <xref linkend="udm:syntax:ldap"/>.
					For performance reason it is recommended to implement a class derived from <classname>UDM_Attribute</classname> or <classname>UDM_Objects</classname> instead of using <classname>LDAP_Search</classname>.
					The file <filename>/usr/lib/python3/dist-packages/univention/admin/syntax.py</filename> contains several examples.
				</para>
				<example id="udm:ea:select:dynamic:example">
					<title>Dynamic selection list for Extended Attributes</title>
					<para>
						The idea is to create a container with sub-entries for each selection.
						This following listing declares a new syntax class for selecting a profession level.
					</para>
					<programlisting language="python"><![CDATA[
class DynamicSelection(UDM_Objects):
	udm_modules = ('container/cn',)
	udm_filter = '(&(objectClass=organizationalRole)(ou:dn:=DynamicSelection))'
	simple = True  # only one value is selected
	empty_value = True  # allow selecting nothing
	key = '%(name)s'  # this is stored
	label = '%(description)s'  # this is displayed
	regex = None  # no validation in frontend
	error_message = 'Invalid value'
					]]></programlisting>
					<para>
						The Python code should be put into a file named <filename>DynamicSelection.py</filename>.
						The following code registers this new syntax in <acronym>LDAP</acronym> and adds some values.
						It also creates an Extended Attribute for user objects using this syntax.
					</para>
					<programlisting language="sh"><![CDATA[
syntax='DynamicSelection'
base="cn=univention,$(ucr get ldap/base)"

udm container/ou create --position "$base" \
	--set name="$syntax" --set description='UCS profession level'
dn="ou=$syntax,$base"

udm container/cn create --position "$dn" \
	--set name="value1" --set description='UCS Guru (> 5)'
udm container/cn create --position "$dn" \
	--set name="value2" --set description='UCS Regular (1..5)'
udm container/cn create --position "$dn" \
	--set name="value3" --set description='UCS Beginner (< 1)'

udm container/cn create --ignore_exists --position "$base" \
	--set name='udm_syntax'
dn="cn=udm_syntax,$base"
udm settings/udm_syntax create --position "$dn" \
	--set name="$syntax" --set filename="DynamicSelection.py" \
	--set data="$(bzip2 <DynamicSelection.py | base64)" \
	--set package="$syntax" --set packageversion="1"

udm settings/extended_attribute create --position "cn=custom attributes,$base" \
	--set name='Profession' \
	--set module='users/user' \
	--set tabName='General' \
	--set translationTabName='"de_DE" "Allgemein"' \
	--set groupName='Personal information' \
	--set translationGroupName='"de_DE" "Persönliche Informationen"' \
	--set shortDescription='UCS profession level' \
	--set translationShortDescription='"de_DE" "UCS Erfahrung"' \
	--set longDescription='Select a level of UCS experience' \
	--set translationLongDescription='"de_DE" "Wählen Sie den Level der Erfahrung mit UCS"' \
	--set objectClass='univentionFreeAttributes' \
	--set ldapMapping='univentionFreeAttribute1' \
	--set syntax="$syntax" --set mayChange=1 --set valueRequired=0
					]]></programlisting>
				</example>
			</section>
		</section>

		<section id="udm:ea:issues">
			<title>Known issues</title>
			<itemizedlist>
				<listitem>
					<simpara>
						The <literal>tabName</literal> and <literal>groupName</literal> values must exactly match the values already used in the modules.
						If they do not match, a new tab or group is added.
						This also applies to the translation:
						They must match the already translated strings and must be repeated for every Extended Attribute again and again.
						The untranslated strings are best extracted directly from the Python source code of the modules in <filename>/usr/lib/python3/dist-packages/univention/admin/handlers/*/*.py</filename>.
						For the translated strings run <command>msgunfmt /usr/share/locale/<replaceable>language-code</replaceable>/LC_MESSAGES/univention-admin*.mo</command>.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						The <literal>overwritePosition</literal> values must exactly match the name of an already defined property.
						Otherwise <acronym>UDM</acronym> will crash.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Extended Attributes may be removed, when matching data is still stored in <acronym>LDAP</acronym>.
						The schema on the other hand must only be removed when all matching data is removed.
						Otherwise the server <command>slapd</command> will fail to start.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Removing <literal>objectClass</literal>es from <acronym>LDAP</acronym> objects must be done manually.
						Currently <acronym>UDM</acronym> does not provide any functionality to remove unneeded object classes or methods to force-remove an object class including all attributes, for which the object class is required.
					</simpara>
				</listitem>
			</itemizedlist>
		</section>

		<section id="udm:ea:option">
			<title>Extended Options
				<indexterm><primary>Extended Attributes</primary><secondary>Options</secondary></indexterm>
			</title>
			<remark>PMH: Bug #21912</remark>
			<para>
				<acronym>UDM</acronym> properties can be enabled and disabled via <firstterm>options</firstterm>.
				For example all properties of a user related to Samba can be switched on or off to reduce the settings shown to an administrator.
				If many Extended Attributes are added to a <acronym>UDM</acronym> module, it might proof necessary to also create new options.
				Options are per <acronym>UDM</acronym> module.
			</para>
			<para>
				Similar to Extended Attributes an Extended Option is created by using the <acronym>UDM</acronym> command line interface <command>univention-directory-manager</command> or its alias <command>udm</command>.
				The module is called <classname>settings/extended_options</classname>.
				Extended Options can be stored anywhere in the <acronym>LDAP</acronym>, but the default location would be <literal>cn=custom attributes,cn=univention,</literal> below the <acronym>LDAP</acronym> base.
				Since the join script creating the option may be called on multiple hosts, it is a good idea to add the <option>--ignore_exists</option> option, which suppresses the error exit code in case the object already exists in <acronym>LDAP</acronym>.
			</para>
			<para>
				The module <classname>settings/extended_options</classname> has the following properties:
			</para>
			<variablelist>
				<varlistentry><term><literal>name</literal> (required)</term>
					<listitem>
						<simpara>
							Name of the option.
						</simpara>
					</listitem>
				</varlistentry>
				<varlistentry><term><literal>shortDescription</literal> (required)</term>
					<listitem>
						<simpara>
							Default short description.
						</simpara>
					</listitem>
				</varlistentry>
				<varlistentry><term><literal>translationShortDescription</literal> (optional, multiple)</term>
					<listitem>
						<simpara>
							Translation of short description.
						</simpara>
					</listitem>
				</varlistentry>
				<varlistentry><term><literal>longDescription</literal> (required)</term>
					<listitem>
						<simpara>
							Default long description.
						</simpara>
					</listitem>
				</varlistentry>
				<varlistentry><term><literal>translationLongDescription</literal> (optional, multiple)</term>
					<listitem>
						<simpara>
							Translation of long description.
						</simpara>
					</listitem>
				</varlistentry>
				<varlistentry><term><literal>default</literal> (optional)</term>
					<listitem>
						<simpara>
							Enable the option by default.
						</simpara>
					</listitem>
				</varlistentry>
				<varlistentry><term><literal>editable</literal> (optional)</term>
					<listitem>
						<simpara>
							Option may be repeatedly turned on and off.
						</simpara>
					</listitem>
				</varlistentry>
				<varlistentry><term><literal>module</literal> (required, multiple)</term>
					<listitem>
						<simpara>
							A list of module names where this Extended Option should be added to.
						</simpara>
					</listitem>
				</varlistentry>
				<varlistentry><term><literal>objectClass</literal> (optional, multiple)</term>
					<listitem>
						<simpara>
							A list of <acronym>LDAP</acronym> object classes, which when found, enable this option.
						</simpara>
					</listitem>
				</varlistentry>
			</variablelist>
			<example id="udm:eo">
				<title>Extended Option</title>
				<programlisting language="sh">
eval "$(ucr shell)"
udm settings/extended_options create "$@" --ignore_exists \
	--position "cn=custom attributes,cn=univention,$ldap_base" \
	--set name="My Option" \
	--set shortDescription="Example option" \
	--set translationShortDescription='"de_DE" "Beispieloption"' \
	--set longDescription="An example option" \
	--set translationLongDescription='"de_DE" "Eine Beispieloption"' \
	--set default=0 \
	--set editable=0 \
	--set module="users/user" \
	--set objectClass=univentionExamplesUdmOC
				</programlisting>
			</example>
		</section>

		<section id="udm:hook">
			<title>Extended Attribute Hooks
				<indexterm><primary>Extended Attributes</primary><secondary>Hooks</secondary></indexterm>
			</title>
			<remark>PMH: Bug #25053</remark>
			<!-- https://wiki.univention.de/index.php?title=Erstellen_eines_erweiterten_Attributs_mit_Hook -->
			<para>
				Hooks provide a mechanism to pre- and post-process the values of Extended Attributes.
				Normally <acronym>UDM</acronym> properties are stored as-is in <acronym>LDAP</acronym> attributes.
				Hooks can modify the <acronym>LDAP</acronym> operations when an object is created, modified, deleted or retrieved.
				They are implemented in Python and the file must be placed in the directory <filename class="directory">/usr/lib/python3/dist-packages/univention/admin/hooks.d/</filename>.
				The file name must end with <filename class="extension">.py</filename>.
			</para>
			<para>
				The module <package>univention.admin.hook</package> provides the class <classname>simpleHook</classname>, which implements all required hook functions.
				By default they don't modify any request but do log all calls.
				This class should be used as a base class for inheritance.
			</para>
			<!-- https://wiki.univention.de/index.php?title=Entwicklung_und_Integration_eigener_Module_in_Univention_Directory_Manager -->
			<variablelist>
				<varlistentry>
					<term>
						<methodsynopsis>
							<methodname>hook_open</methodname>
							<methodparam><parameter>self</parameter></methodparam>
							<methodparam><parameter>obj</parameter></methodparam>
						</methodsynopsis>
					</term>
					<listitem>
						<simpara>
							This method is called by the default <methodname>open</methodname> handler just before the current state of all properties is saved.
						</simpara>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>
						<methodsynopsis>
							<methodname>hook_ldap_pre_create</methodname>
							<methodparam><parameter>self</parameter></methodparam>
							<methodparam><parameter>obj</parameter></methodparam>
						</methodsynopsis>
					</term>
					<listitem>
						<simpara>
							This method is called before a <acronym>UDM</acronym> object is created.
							It is called after the module validated all properties but before the <firstterm>add-list</firstterm> is created.
						</simpara>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>
						<methodsynopsis>
							<type>list</type>
							<methodname>hook_ldap_addlist</methodname>
							<methodparam><parameter>self</parameter></methodparam>
							<methodparam><parameter>obj</parameter></methodparam>
							<methodparam><parameter>al</parameter><initializer>[]</initializer></methodparam>
						</methodsynopsis>
					</term>
					<listitem>
						<simpara>
							This method is called before a <acronym>UDM</acronym> object is created.
							It gets passed a list of two-tuples <literal>(ldap-attribute-name, list-of-values)</literal> which will be used to create the <acronym>LDAP</acronym> object.
							The method must return the (modified) list.
							Notice that <methodname>hook_ldap_modlist</methodname> will also be called next.
						</simpara>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>
						<methodsynopsis>
							<methodname>hook_ldap_post_create</methodname>
							<methodparam><parameter>self</parameter></methodparam>
							<methodparam><parameter>obj</parameter></methodparam>
						</methodsynopsis>
					</term>
					<listitem>
						<simpara>
							This method is called after the object was created in <acronym>LDAP</acronym>.
						</simpara>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>
						<methodsynopsis>
							<methodname>hook_ldap_pre_modify</methodname>
							<methodparam><parameter>self</parameter></methodparam>
							<methodparam><parameter>obj</parameter></methodparam>
						</methodsynopsis>
					</term>
					<listitem>
						<simpara>
							This method is called before a <acronym>UDM</acronym> object is modified.
							It is called after the module validated all properties but before the <firstterm>modification-list</firstterm> is created.
						</simpara>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>
						<methodsynopsis>
							<type>list</type>
							<methodname>hook_ldap_modlist</methodname>
							<methodparam><parameter>self</parameter></methodparam>
							<methodparam><parameter>obj</parameter></methodparam>
							<methodparam><parameter>ml</parameter><initializer>[]</initializer></methodparam>
						</methodsynopsis>
					</term>
					<listitem>
						<simpara>
							This method is called before a <acronym>UDM</acronym> object is created or modified.
							It gets passed a list of tuples, which are either two-tuples <literal>(ldap-attribute-name, list-of-new-values)</literal> or three-tuples <literal>(ldap-attribute-name, list-of-old-values, list-of-new-values)</literal>.
							It will be used to create or modify the <acronym>LDAP</acronym> object.
							The method must return the (modified) list.
						</simpara>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>
						<methodsynopsis>
							<methodname>hook_ldap_post_modify</methodname>
							<methodparam><parameter>self</parameter></methodparam>
							<methodparam><parameter>obj</parameter></methodparam>
						</methodsynopsis>
					</term>
					<listitem>
						<simpara>
							This method is called after the object was modified in <acronym>LDAP</acronym>.
						</simpara>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>
						<methodsynopsis>
							<methodname>hook_ldap_pre_remove</methodname>
							<methodparam><parameter>self</parameter></methodparam>
							<methodparam><parameter>obj</parameter></methodparam>
						</methodsynopsis>
					</term>
					<listitem>
						<simpara>
							This method is called before a <acronym>UDM</acronym> object is removed.
						</simpara>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>
						<methodsynopsis>
							<methodname>hook_ldap_post_remove</methodname>
							<methodparam><parameter>self</parameter></methodparam>
							<methodparam><parameter>obj</parameter></methodparam>
						</methodsynopsis>
					</term>
					<listitem>
						<simpara>
							This method is called after the object was removed from <acronym>LDAP</acronym>.
						</simpara>
					</listitem>
				</varlistentry>
			</variablelist>
			<para>
				The following example implements a hook, which removes the object-class <literal>univentionFreeAttributes</literal> if the property <literal>isSampleUser</literal> is no longer set.
			</para>
			<programlisting language="python"><![CDATA[
from univention.admin.hook import simpleHook

class RemoveObjClassUnused(simpleHook):
	type = 'RemoveObjClassUnused'

	def hook_ldap_post_modify(self, obj):
		"""Remove unused objectClass."""
		ext_attr_name = 'isSampleUser'
		class_name = 'univentionFreeAttributes'

		if obj.oldinfo.get(ext_attr_name) in ('1',) and \
				obj.info.get(ext_attr_name) in ('0', None):
			if class_name in obj.oldattr.get('objectClass', []):
				obj.lo.modify(obj.dn,
					[('objectClass', class_name, '')])
			]]></programlisting>
			<para>
				After installing the file the hook can be activated by setting the <literal>hook</literal> property of an Extended Attribute to <classname>RemoveObjClassUnused</classname>:
			</para>
			<programlisting language="python"><![CDATA[
udm settings/extended_attribute modify \
	--dn ... \
	--set hook=RemoveObjClassUnused
			]]></programlisting>
			</section>
	</section>

	<section id="udm:modules">
		<title>UDM Modules
			<indexterm><primary>Directory Manager</primary><secondary>Custom Modules</secondary></indexterm>
		</title>
		<remark>PMH: Bug #29525</remark>
		<para>
			&ucsUDM; verwendet zur Verwaltung der Daten des Verzeichnisdienstes eine flexible und erweiterbare Struktur aus Python-Modulen.
			Zusätzlich einzubindende Module werden nach Ablage im Dateisystem automatisch erkannt und zur Verwendung an Kommandozeile und Web-Interface angeboten.

			Die Entwicklung eigener Module erlaubt es, den &ucsUDM; über den Funktionsumfang von erweiterten Attributen hinaus flexibel zu erweitern.
		</para>

		<section id="udm:modules:overview">
			<title>Übersicht</title>

			<para>
				&ucsUDM; (kurz UDM) verwendet zur Abbildung von LDAP-Objekten eine eigene Modulstruktur.
				Im Regelfall entspricht eines dieser UDM-Module einem LDAP-Objekt (z.B. einem Benutzer, einer Gruppe oder einem Container).
				Eine recht [http://forum.univention.de/viewtopic.php?p=4278#p4278 kompakte Erläuterung] ist im Univention Forum zu finden. <!-- FIXME -->
			</para>

			<para>
				Die Module sind nach Aufgabenbereichen strukturiert im Verzeichnis <filename class="directory">/usr/share/pyshared/univention/admin/handlers/</filename> abgelegt.
				Die Module für die Verwaltung der verschiedenen Rechnerobjekte befinden sich beispielsweise unterhalb des Ordners '<filename class="directory">computers/</filename>'.
				Dieses Objekt kann von der Kommandozeilenschnittstelle durch '<classname>computers/windows'</classname> angesprochen werden.
			</para>

			<para>
				Eigene Module sollten nach Möglichkeit in einem eigenen Unterverzeichnis abgelegt werden, um Konflikte mit eventuell später in UCS integrierten Standardmodulen zu vermeiden.
				Damit die Module initialisiert werden können, muss im Verzeichnis eine Datei <filename class="directory">__init__.py</filename> existieren.
			</para>
		</section>

		<section id="udm:modules:structure">
			<title>Aufbau eines Moduls</title>

			<para>
				Ein Modul besteht aus der Definition der Modul-Attribute und der Definition einer von <classname>univention.admin.simpleLdap</classname> abgeleiteten Klasse mit Namen <classname>object</classname>.
			</para>
			<note>
				<para>
					Der vorgegebene Name <classname>object</classname> hat historische Gründe und muß trotz der Namenskollision mit dem <ulink url="http://docs.python.org/library/functions.html#object">Python type object</ulink> beibehalten werden.
				</para>
			</note>
			<para>
				Im folgenden wird mit einer ausführlichen Beschreibung der zu definierenden Variablen begonnen.
				Im <xref linkend="udm:modules:class"/> wird die Klasse <classname>object</classname> genauer betrachtet und notwendige Definitionen und Funktionen in der Klasse aufgelistet.
				Abschließend werden noch zwei optionale Funktionen definiert und erklärt.
			</para>

			<section id="udm:modules:globals">
				<title>Globale Variablen</title>
				<para>
					Im Folgenden werden die globalen Variablen beschrieben, die in einem &ucsUDM;-Modul besondere Bedeutungen haben.
					Dabei wird zwischen zwingend notwendigen und optionalen Variablen unterschieden.
					Die folgende Liste enthält die erforderlichen Variablen, die jedes Modul definieren muss:
				</para>
				<variablelist>
					<varlistentry>
						<term><varname>module</varname></term>
						<listitem><simpara>
								Ein String, der dem Namen des UDM-Moduls entsprechen muss, z.B. <classname>computers/computer</classname>
						</simpara></listitem>
					</varlistentry>
					<varlistentry>
						<term><varname>operations</varname></term>
						<listitem><para>
								Eine Liste von Strings; enthält alle mit diesem Objekt erlaubten LDAP-Operationen.
								Mögliche Operationen sind: <simplelist type="inline"><member>add</member><member>edit</member><member>remove</member><member>search</member><member>move</member></simplelist>
						</para></listitem>
					</varlistentry>
					<varlistentry>
						<term><varname>short_description</varname></term>
						<listitem><simpara>
								Diese Beschreibung wird im Web-Frontend des &ucsUDM; als Name angezeigt.
								Within the UMC module LDAP navigation wird dieser Text in der Auswahlliste für mögliche Objekttypen angezeigt.
						</simpara></listitem>
					</varlistentry>
					<varlistentry>
						<term><varname>long_description</varname></term>
						<listitem><simpara>
								Eine ausführliche Beschreibung des Moduls.
						</simpara></listitem>
					</varlistentry>
					<varlistentry>
						<term><varname>childs</varname></term>
						<listitem><simpara>
								Gibt an, ob es sich bei diesem LDAP-Objekt um einen Container handelt.
								In diesem Fall wird diese Variable auf den Wert <literal>1</literal> gesetzt und andernfalls auf <literal>0</literal>.
						</simpara></listitem>
					</varlistentry>
					<varlistentry id="udm:modules:globals:options">
						<term><varname>options</varname></term>
						<listitem>
							<para>
								Die Variable <varname>options</varname> ist ein Python-Dictionary und definiert verschiedene Optionen, die für das Modul gesetzt werden können bzw.  standardmäßig gesetzt sind.
								Diese Optionen können später bspw. über das Web-Interface des UDM über den Reiter <guimenu>(Optionen)</guimenu> aktiviert und deaktiviert werden.
								Wird eine Option aktiviert, werden ein oder mehrere LDAP-Objektklassen (gegeben durch den Parameter <classname>objectClasses</classname>) dem Objekt hinzugefügt und im Web-UDM weitere Felder und ggf.
								Reiter freigeschaltet (bspw. die Groupware-Option für Benutzer).
								Das Dictionary ordnet jeder Option (als <classname>univention.admin.option</classname>-Objekte) eine eindeutigen Zeichenkette zu, die später zur Referenzierung verwendet wird (siehe <xref linkend="udm:modules:globals:property_descriptions"/>).
								Each instance has the following parameters:
							</para>
							<variablelist>
								<varlistentry>
									<term><varname>short_description</varname></term>
									<listitem><simpara>
											Eine kurze Beschreibung der Option, die beispielsweise im Web-Frontend des &ucsUDM; als beschreibender Text zu den Eingabefeldern genutzt wird.
									</simpara></listitem>
								</varlistentry>
								<varlistentry>
									<term><varname>long_description</varname></term>
									<listitem><simpara>
											Eine längere Beschreibung der Option.
									</simpara></listitem>
								</varlistentry>
								<varlistentry>
									<term><varname>default</varname></term>
									<listitem><simpara>
											Definiert, ob diese Option standardmäßig aktiviert sein soll.
											<literal>True</literal> steht dabei für aktiv und <literal>False</literal> für inaktiv.
									</simpara></listitem>
								</varlistentry>
								<varlistentry>
									<term><varname>editable</varname></term>
									<listitem><simpara>
											Definiert, ob diese Option mehrmalig gesetzt und entfernt werden kann, oder ob diese Option nach einmaliger Aktivierung immer gesetzt bleibt.
									</simpara></listitem>
								</varlistentry>
								<varlistentry>
									<term><varname>objectClasses</varname></term>
									<listitem><simpara>
											Eine Menge von LDAP-Objektklassen, die der LDAP-Eintrag haben muß, damit es mit dieser Option assoziiert wird.
											Damit ist kein Automatismus verbunden, aber diese Information ist bei der späteren Implementierung der Funktion <function>identify()</function> (<xref linkend="udm:modules:functions"/>) ggf. hilfreich.
									</simpara></listitem>
								</varlistentry>
							</variablelist>
							<para>
								Beispiel:
							</para>
<programlisting language="python"><![CDATA[
options = {
	'opt1': univention.admin.option(
		short_description=_('short description'),
		default=True),
}
]]></programlisting>
						</listitem>
					</varlistentry>
					<varlistentry id="udm:modules:globals:property_descriptions">
						<term><varname>property_descriptions</varname></term>
						<listitem>
							<para>
								Dieses Python-Dictionary enthält alle Attribute, die dieses Modul zur Verfügung stellt.
								Dabei werden die Attribute (diesmal als <classname>univention.admin.property</classname>-Objekte), über eine eindeutige Zeichenkette als Schlüssel referenziert.
								Ein solches Modul-Attribut entspricht in der Regel einem LDAP-Attribut, kann aber auch aus anderen Quellen stammen oder berechnet werden.
							</para>
							<para>
								Beispiel:
							</para>
<programlisting language="python"><![CDATA[
property_descriptions = {
	'prop1': univention.admin.property(
		short_description='name'
		long_description='long description',
		syntax=univention.admin.syntax.string,
		multivalue=False,
		required=True,
		may_change=True,
		identifies=False,
		dontsearch=True,
		default='default value',
		options=['opt1']),
}
]]></programlisting>
							<para>
								Die Parameter haben folgende Bedeutung:
							</para>
							<variablelist>
								<varlistentry>
									<term><varname>short_description</varname>: <type>str</type></term>
									<listitem><simpara>
											Eine kurze Beschreibung, die beispielsweise im Web-Frontend des &ucsUDM; als beschreibender Text zu den Eingabefeldern genutzt wird.
									</simpara></listitem>
								</varlistentry>
								<varlistentry>
									<term><varname>long_description</varname>: <type>str</type></term>
									<listitem><simpara>
											Eine ausführlichere Beschreibung, die im Web-Frontend des &ucsUDM; für die Tooltips genutzt wird.
									</simpara></listitem>
								</varlistentry>
								<varlistentry>
									<term><varname>syntax</varname>: <type>type</type></term>
									<listitem><simpara>
											Dieser Parameter gibt den Typ eines Attributs an.
											Anhand dieser Typ-Definitionen kann der &ucsUDM; die angegebenen Werte für das Attribut überprüfen und bei ungültigen Werten eine detaillierte Fehlermeldung liefern.
											A list of syntax classes is available in <xref linkend="udm:syntax:ldap"/>..
									</simpara></listitem>
								</varlistentry>
								<varlistentry>
									<term><varname>multivalue</varname>: <type>bool</type></term>
									<listitem><simpara>
											kann die Werte <literal>True</literal> oder <literal>False</literal> annehmen. Ist dieser Parameter auf <literal>True</literal> gesetzt handelt es sich bei dem Wert des Attributs um eine Liste.
											Der Parameter <varname>syntax</varname> gibt in diesem Fall den Typ der Elemente dieser Liste an.
									</simpara></listitem>
								</varlistentry>
								<varlistentry>
									<term><varname>required</varname>: <type>bool</type></term>
									<listitem><simpara>
											Ist dieser Parameter auf <literal>True</literal> gesetzt, muß für dieses Attribut ein Wert angegeben werden.
									</simpara></listitem>
								</varlistentry>
								<varlistentry>
									<term><varname>may_change</varname>: <type>bool</type></term>
									<listitem><simpara>
											Ist dieser Parameter auf <literal>True</literal> gesetzt, kann der Wert dieses Attributs auch nach der Erstellung des Objektes verändert werden, ansonsten nur einmalig bein Anlegen.
									</simpara></listitem>
								</varlistentry>
								<varlistentry>
									<term><varname>editable</varname>: <type>bool</type></term>
									<listitem><simpara>
											Ist dieser Parameter auf <literal>False</literal> gesetzt, dann kann der Wert dieses Attributes schon beim Erstellen nicht angegeben werden. Dies ist i.d.R. nur für automatisch generierte oder berechnete Werte interessant.
									</simpara></listitem>
								</varlistentry>
								<varlistentry>
									<term><varname>identifies</varname>: <type>bool</type></term>
									<listitem><simpara>
											diese Option sollte bei genau einem Attribut eines Moduls auf <literal>True</literal> gesetzt sein, um dasjenige Attribut zu kennzeichnen, anhand dessen das Objekt eindeutig zu identifizieren ist.
									</simpara></listitem>
								</varlistentry>
								<varlistentry>
									<term><varname>dontsearch</varname>: <type>bool</type></term>
									<listitem><simpara>
											Ist dieser Parameter auf <literal>False</literal> gesetzt, kann das Feld nicht als das Feld für die Suche ausgewählt werden.
									</simpara></listitem>
								</varlistentry>
								<varlistentry>
									<term><varname>default</varname>: <type>Any</type></term>
									<listitem><simpara>
											Ein Vorgabewert für das Attribut, wenn das Objekt über das Web-Frontend angelegt wird.
									</simpara></listitem>
								</varlistentry>
								<varlistentry>
									<term><varname>options</varname>: <type>List[str]</type></term>
									<listitem><simpara>
											Eine Liste von Schlüsselwörtern, die Optionen identifizieren mit denen dieses Attribut ein- bzw. ausgeblendet werden kann.
									</simpara></listitem>
								</varlistentry>
							</variablelist>
						</listitem>
					</varlistentry>
					<varlistentry id="udm:modules:globals:layout">
						<term><varname>layout</varname></term>
						<listitem>
							<para>
								Die Attribute eines Objektes können in Gruppen angeordnet werden.
								Diese werden beispielsweise im &ucsUDM; als Reiter dargestellt.
								Für jeden Reiter muß eine Instanz von <classname>univention.admin.tab</classname> im Array <varname>layout</varname> angelegt werden.
								Als Parameter wird der Name, eine Beschreibung für den Reiter sowie eine Liste der Zeilen erwartet.
								In jeder Zeile können sich bis zu zwei Attribute befinden, für die jeweils eine Instanz von <classname>univention.admin.field</classname> anzulegen ist.
								Als Parameter wird jeweils der Name eines UDM-Attributs aus <xref linkend="udm:modules:globals:property_descriptions"/> erwartet.
								Über den optionalen Parameter <property>colspan=2</property> kann das Widget für ein UDM-Attribut auch über beide Spalten ausgedehnt werden.
							</para>
<programlisting language="python"><![CDATA[
layout = [
	univention.admin.tab(_('Tab header'), _('Tab description'), [
		[univention.admin.field('prop1'), univention.admin.field('prop3')],
		[univention.admin.field('prop3', colspan=2), ],
		...
	], advanced=False),
	...
]
]]></programlisting>
							<para>
								Über die optionale <property>advanced=True</property> Einstellung kann kontrolliert werden, ob der Reiter standardmäßig angezeigt werden soll oder nur dann, wenn das Anzeigen der <guimenu>erweiterten Einstellungen</guimenu> aktiviert ist.
							</para>
						</listitem>
					</varlistentry>
					<varlistentry id="udm:modules:globals:mapping">
						<term><varname>mapping</varname></term>
						<listitem>
							<para>
								Bildet die UDM-Attribute auf LDAP-Attribute ab.
								Für jedes UDM-Attribut wird i.d.R. eine Abbildung registriert, die den Namen eines UDM-Attributs (<varname>udm_name</varname>) mit dem zugehörigen LDAP-Attribut (<varname>ldap_name</varname>) verknüpft:
							</para>
<programlisting language="python"><![CDATA[
mapping.register(udm_name, ldap_name)
mapping.register(udm_name, ldap_name, map_value, unmap_value)
]]></programlisting>
							<para>
								Für die Umwandlung der Werte zwischen UDM-Attribut und LDAP-Attribut können zwei Funktionen angegeben werden:
								<function>map_value</function> ist für die Richtung UDM → LDAP zuständig, <function>unmap_value</function> für die Regenrichtung von LDAP zu UDM.
								Die zweite Funktion ist insbesondere notwendig für alle einwertige UDM-Attribute, da im LDAP selbst diese immer als null- oder einelementige Liste realisiert sind.
								Die Standard-Implementierung <function>univention.admin.mapping.ListToString</function> liefert jeweils den ersten Eintrag der Liste zurück und kann daher i.d.R. für alle einwertigen Attribute als <function>unmap_value</function>-Funktion angegeben werden.
								Für <function>map_value</function> (UDM→LDAP) genügt es <literal>None</literal> anzugeben, das dafür sorgt, das der ggf. vorhandene Wert in eine einelementige Liste konvertiert wird.
							</para>
							<warning>
								<para>
									Ein UDM-Attribute enthält entweder immer nur eine Zeichenkette (einwertige Attribute) oder eine Liste von Zeichenketten (mehrwertige Attribute), nie nur eine Zahl oder einen anderen Python-Typ!
								</para>
							</warning>
						</listitem>
					</varlistentry>
				</variablelist>
				<para>
					Folgende Angaben sind optional und müssen nur definiert werden, wenn das Modul diese speziellen Attribute besitzt:
				</para>
				<variablelist>
					<varlistentry>
						<term><varname>virtual</varname></term>
						<listitem><simpara>
								Module, die diese Variable auf <literal>1</literal> setzen sind eine Art Hilfsmodul für andere Module, die keine zugehörigen LDAP-Objekte haben.
								Ein Beispiel hierfür ist das Modul <classname>computers/computer</classname>, das als Hilfsmodul für alle Rechnertypen dient.
						</simpara></listitem>
					</varlistentry>
					<varlistentry>
						<term><varname>template</varname></term>
						<listitem><simpara>
								Ein Modul, das diese Variable auf <literal>1</literal> setzt, bietet die Möglichkeit Vorgabewerte für die Attribute von anderen Modulen zu definieren.
								Ein Beispiel hierfür ist die Benutzer-Vorlage (das Modul <classname>settings/usertemplate</classname>).
								Eine solche Vorlage kann dann beispielsweise beim Anlegen eines Benutzers ausgewählt werden und die darin definierten Werte werden als Vorgaben in die Eingabemasken übernommen.
						</simpara></listitem>
					</varlistentry>
				</variablelist>
			</section>

				<section id="udm:modules:class">
					<title>The class object</title>
					<para>
						Die Klasse <classname>object</classname> eines Moduls bildet die Schnittstelle zwischen &ucsUDM; und den LDAP-Operationen, die beim Anlegen, Verändern, Verschieben oder Löschen eines Objekts ausgelöst werden.
						Diese Klasse unterstützt den &ucsUDM; bei der Abbildung der definierten Attribute des Moduls auf LDAP-Objekte und -Attribute.
					</para>
					<para>
						Dafür ist die vordefinierte API der Klasse einzuhalten.
						Die Basisklasse <classname>univention.admin.handlers.simpleLdap</classname> bietet für einfache LDAP-Objekte die wesentlichen Funktionalitäten, so dass in der Regel nur noch wenige Anpassungen notwendig sind.
						Eine Instanz (<varname>self</varname>) kapselt alle Informationen eines Objekts, auf die auf verschiedenen Arten zugegriffen werden kann:
					</para>
					<variablelist>
						<varlistentry>
							<term><varname>self.dn</varname> → String</term>
							<listitem><simpara>
									Distinguished Name im LDAP-DIT
							</simpara></listitem>
						</varlistentry>
						<varlistentry>
							<term><varname>self.position</varname> → univention.admin.uldap#position</term>
							<listitem><simpara>
									Container-Element im LDAP-DIT
							</simpara></listitem>
						</varlistentry>
						<varlistentry>
							<term><varname>self['UDM-Propertyname']</varname> → [Werte, ...]</term>
							<listitem><simpara>
									Wrapper um <varname>self.info</varname>, der zusätzlich bei einer Zuweisung den Wert anhand der Syntax überprüft und Standardwerte beim Lesen liefert.
							</simpara></listitem>
						</varlistentry>
						<varlistentry>
							<term><varname>self.info['UDM-Propertyname']</varname> → [Werte, ...]</term>
							<listitem><simpara>
									Dictionary mit den aktuell gesetzten Werten der UDM-Properties.
									Der direkte Zugriff darauf ermöglicht z.B. die Initialisierung von <property>editable=False</property> Properties.
							</simpara></listitem>
						</varlistentry>
						<varlistentry>
							<term><varname>self.oldinfo['UDM-Propertyname']</varname> → [Werte, ...]</term>
							<listitem><simpara>
									Dictionary der ursprünglich gelesenen Werte, umgewandelt in UDM-Propertynamen.
									Diese Information wird vor allem intern benötigt, um Änderungen am Python-Objekt zurück auf den zugehörigen Eintrag im LDAP zu übertragen.
							</simpara></listitem>
						</varlistentry>
						<varlistentry>
							<term><varname>self.oldattr['LDAP-Attributname']</varname> → [Werte, ...]</term>
							<listitem><simpara>
									Dictionary der ursprünglich aus dem LDAP gelesenen Attribute.
									Wird i.d.R. nur dazu genutzt, um die ''objectClass''es auszulesen.
							</simpara></listitem>
						</varlistentry>
						<varlistentry>
							<term><varname>self.oldpolicies</varname> → [Policy-DNs, ...]</term>
							<listitem><simpara>
									Kopie der Liste der DNs der referenzierten univentionPolicyReference...
							</simpara></listitem>
						</varlistentry>
						<varlistentry>
							<term><varname>self.policies</varname> → [Policy-DNs, ...]</term>
							<listitem><simpara>
									Liste der DNs der referenzierten univentionPolicyReference...
							</simpara></listitem>
						</varlistentry>
						<varlistentry>
							<term><varname>self.policyObjects[Policy-DN]</varname> → univention.admin.handlers#simplePolicy</term>
							<listitem><simpara>
									Dictionary der geladenen Policies.
							</simpara></listitem>
						</varlistentry>
						<varlistentry>
							<term><varname>self.extended_udm_attributes</varname> → [univention.admin#extended_attribute, ...]</term>
							<listitem><simpara>
									Liste aller ''Erweiterten Attribute'' des Objekts.
							</simpara></listitem>
						</varlistentry>
						<varlistentry>
							<term><varname>self.ldap_extra_objectclasses</varname> → [(objectClass, propertyName, syntax, ldapMapping, deleteValues, deleteObjectClass), ...]</term>
							<listitem><simpara>
									interne Liste von Tupeln für ''Erweiterten Attribute'', um automatisch Objektklassen hinzuzufügen bzw. zu entfernen
							</simpara></listitem>
						</varlistentry>
					</variablelist>
					<para>
						Die Klasse <classname>simpleLdap</classname> bietet zudem die weitere Möglichkeit, vor und nach der LDAP-Operation durch den Aufruf von Funktionen weitere Anpassungen vorzunehmen.
						Beispielsweise wird vor dem Anlegen eines LDAP-Objekte die Funktion ''_ldap_pre_create()'' und nach dem Vorgang die Funktion ''_ldap_post_create()'' aufgerufen.
						Solche Pre- und Post-Funktionen existieren analog auch für die Operationen <function>modify</function>, <function>move</function> und <function>remove</function>.
						Die folgende Tabelle listet alle verwendeten Funktionen in der Aufrufreihenfolge von oben nach unten auf:
					</para>
					<table>
						<title>LDAP actions and hooks</title>
						<tgroup cols="4">
							<colspec colnum="1" colname="col1" colwidth="3*"/>
							<colspec colnum="2" colname="col2" colwidth="1*"/>
							<colspec colnum="3" colname="col3" colwidth="1*"/>
							<colspec colnum="4" colname="col4" colwidth="1*"/>
							<thead>
								<row>
									<entry>Description</entry>
									<entry>Create</entry>
									<entry>Modify</entry>
									<entry>Remove</entry>
								</row>
							</thead>
							<tbody>
								<row>
									<entry>Before validation</entry>
									<entry namest="col2" nameend="col3" align="center">_ldap_pre_ready()</entry>
								</row>
								<row>
									<entry morerows="1">Validates, that all must attributes are set</entry>
									<entry namest="col2" nameend="col3" align="center">ready()</entry>
								</row>
								<row>
									<entry>_ldap_pre_create()</entry>
									<entry>_ldap_pre_modify()</entry>
									<entry>_ldap_pre_remove()</entry>
								</row>
								<row>
									<entry>Policy Copy-on-Write</entry>
									<entry>_update_policies()</entry>
									<entry>_update_policies()</entry>
								</row>
								<row>
									<entry>Extension point for Extended Attribute</entry>
									<entry>hook_ldap_pre_create()</entry>
									<entry>hook_ldap_pre_modify()</entry>
									<entry>hook_ldap_pre_remove()</entry>
								</row>
								<row>
									<entry>Returns initial list of (LDAP-attribute-name, value)- resp. (LDAP-attribute-name, [values]) tuples</entry>
									<entry>_ldap_addlist()</entry>
								</row>
								<row>
									<entry>Calculates difference between self.oldinfo and self.info</entry>
									<entry namest="col2" nameend="col3" align="center">_ldap_modlist()</entry>
								</row>
								<row>
									<entry>Extension point for Extended Attribute</entry>
									<entry>hook_ldap_addlist()</entry>
									<entry>hook_ldap_modlist()</entry>
								</row>
								<row>
									<entry>Real action</entry>
									<entry>ADD</entry>
									<entry>MODIFY</entry>
									<entry>DELETE</entry>
								</row>
								<row>
									<entry></entry>
									<entry>_ldap_post_create()</entry>
									<entry>_ldap_post_modify()</entry>
									<entry>_ldap_post_remove()</entry>
								</row>
								<row>
									<entry>Extension point for Extended Attribute</entry>
									<entry>hook_ldap_post_create()</entry>
									<entry>hook_ldap_post_modify()</entry>
									<entry>hook_ldap_post_remove()</entry>
								</row>
							</tbody>
						</tgroup>
					</table>
					<para>
						The functions <methodname>hook_ldap_*</methodname> are described in <xref linkend="udm:hook"/>.
					</para>
				</section>

			<section id="udm:modules:functions">
				<title>The functions identify and lookup</title>
				<para>
					Diese Funktionen werden genutzt, um bei Suchanfragen aus dem Web-Frontend des &ucsUDM; die dazugehörigen Objekte zu finden (<function>lookup</function>) und um LDAP-Objekte einem &ucsUDM;-Modul zuzuordnen.
					Später werden Beispielimplementierungen für diese zwei Funktionen vorgestellt, die für einfache LDAP-Objekte nur leicht modifiziert werden müssen.
				</para>
			</section>
		</section>

		<section id="udm:modules:example">
			<title>Example module</title>
			<para>
				Im folgenden wird ein Beispiel-Modul für den &ucsUDM; vorgestellt, das auch als Paket ''univention-directory-manager-module-example'' verfügbar ist.
				The complete source code is available from <u:src>management/univention-directory-manager-module-example/</u:src>.
				Das Verzeichnis enthält ein Quellpaket im Debian-Format, aus dem bei Paketbau per <command>./debian/rules binary</command> zwei Binärpakete erzeugt werden:
				Ein Schema-Paket, das auf dem Master installiert werden muss und das Paket mit dem UDM-Modul selbst.
				Der Beispielcode enthält auch ein Skript <command>ip-phone-tool</command>, das beispielhaft die Verwendung der UDM Python API in einem Python-Skript zeigt.
			</para>
			<para>
				Ein &ucsUDM;-Modul besteht in der Regel immer aus zwei Komponenten: Einmal dem Python-Modul, das die Implementierung der Schnittstelle zum &ucsUDM; enthält und einem LDAP-Schema, das das zu verwaltende LDAP-Objekt definiert.
				Im folgenden werden beide Teile beschrieben, wobei der Schwerpunkt bei der Erstellung des Python-Moduls liegt.
			</para>
			<para>
				Das folgende Modul für den &ucsUDM; demonstriert die rudimentäre Verwaltung von IP-Telefonen.
				Dabei wird versucht mit einem einfach gehaltenen Beispiel möglichst viele der Möglichkeiten eines &ucsUDM;-Moduls aufzuzeigen.
			</para>

			<section id="udm:modules:example:python">
				<title>Pythode code of the example module</title>
				<para>
					Vor der Definition des eigentlichen Modul-Quellcodes müssen einige Basis-Python-Module importiert werden, die auf jeden Fall notwendig sind:
				</para>
				<programlisting language="python"><![CDATA[
import univention.admin.filter
import univention.admin.handlers
import univention.admin.syntax
]]></programlisting>
				<para>
					Diese Liste von Python-Modulen kann natürlich noch erweitert werden.
					Wie in <xref linkend="udm:modules:globals"/> beschrieben, werden in einem &ucsUDM;-Modul zu Beginn einige notwendige globale Variablen definiert, die eine Beschreibung des Moduls liefern:
				</para>
				<programlisting language="python"><![CDATA[
module = 'test/ip-phone'
childs = 0
short_description = u'IP-Telefon'
long_description = u'Ein Beispiel-Modul für den ' + \
	u'Univention Directory Manager zur Verwaltung von IP-Telefonen'
operations = ['add', 'edit', 'remove', 'search', 'move']
]]></programlisting>
				<para>
					Eine weitere für das Web-Frontend des &ucsUDM; wichtige globale Variable ist <xref linkend="udm:modules:globals:layout"/>:
				</para>
				<programlisting language="python"><![CDATA[
layout = [
	univention.admin.tab('Allgemein', 'Allgemeine Einstellungen', [
		[univention.admin.field("name"), univention.admin.field("active")],
		[univention.admin.field("ip"), univention.admin.field("protocol")],
		[univention.admin.field("priuser")],
	]),
	univention.admin.tab('Erweiterungen', 'Erweiterte Einstellungen', [
		[univention.admin.field("users")],
	], advanced=True),
]
]]></programlisting>
				<para>
					Sie strukturiert die Anordnung der einzelnen Attribute des Objektes auf die Reiter.
					Es handelt sich dabei um eine Liste aus Elementen vom Typ <classname>univention.admin.tab</classname>, die jeweils den Inhalt eines Reiters bestimmen.
					In diesem Fall gibt es einen Reiter ''Allgemein'' und einen weiteren Reiter ''Erweiterungen''.
				</para>
				<warning>
					<para>
						Es können nicht mehr als zwei Felder nebeneinander angeben werden, d.h. ein Listenelement darf nicht aus mehr als zwei Objekten vom Typ <classname>univention.admin.field</classname> bestehen!
					</para>
				</warning>
				<para>
					Als nächstes sollten die Optionen (<xref linkend="udm:modules:globals:options"/>) und Attribute des Moduls definiert werden.
					In diesem Fall wird eine Option ''extended'' angelegt, deren Funktion später noch erläutert wird.
					Um die Parameter zu konfigurieren wird dem Objekt <classname>univention.admin.option</classname> der Option <varname>short_description</varname> für eine Kurzbeschreibung übergeben.
					Mit <varname>default</varname> kann die Vorkonfiguration bestimmt werden, mit <literal>True</literal> ist die Option standardmässig aktiviert, mit <literal>False</literal> deaktiviert.
				</para>
				<programlisting language="python"><![CDATA[
options = {
	'extended': univention.admin.option(
		short_description=u'Erweiterte Einstellungen',
		default=True
	)
}
]]></programlisting>
				<para>
					Nach den Optionen werden die Attribute des Moduls festgelegt.
					Dabei werden die Attribute durch textuelle Beschreibungen, Syntaxdefinitionen und Anweisungen für das Web-Frontend des &ucsUDM; definiert.
				</para>
				<programlisting language="python"><![CDATA[
property_descriptions = {
]]></programlisting>
				<para>
					Das Attribut <property>name</property> definiert den "Rechnernamen" des IP-Telefons.
					Mit dem Parameter <varname>syntax</varname> wird dem &ucsUDM; mitgeteilt, dass gültige Werte für dieses Attribut der Syntax eines Rechnernamen entsprechen müssen.
					Weitere vordefinierte Syntaxdefinitionen finden sich im Abschnitt <xref linkend="udm:modules:globals:property_descriptions"/>.
					Eine Besonderheit dieses Attributs ist der Parameter <varname>may_change</varname>, der in diesem Fall auf <literal>False</literal> gesetzt ist.
					Dadurch wird festgelegt, dass dieses Attribut nach dem Anlegen des Objektes nicht mehr geändert werden kann:
				</para>
				<programlisting language="python"><![CDATA[
	'name': univention.admin.property(
		short_description=u'Name',
		long_description=u'Name des Telefons',
		syntax=univention.admin.syntax.hostName,
		multivalue=False,
		options=[],
		required=True,
		may_change=False,
		identifies=True
	),
]]></programlisting>
				<para>
					<property>active</property> ist ein Beispiel für ein boolsches/binäres Attribut, das nur die Werte ''1'' oder ''0'' annehmen kann.
					In diesem Beispiel definiert es eine Freischaltung/Sperrung des IP-Telefons.
					Durch dem Parameter ''default=1'' wird das Telefon initial freigeschaltet:
				</para>
				<programlisting language="python"><![CDATA[
	'active': univention.admin.property(
		short_description=u'freigeschaltet',
		long_description=u'Ein IP-Telefon kann gesperrt werden',
		syntax=univention.admin.syntax.boolean,
		multivalue=False,
		options=[],
		required=False,
		default='1',
		may_change=True,
		identifies=False
	),
]]></programlisting>
				<para>
					Das Attribut <property>protocol</property> legt fest, welches VoIP-Protokoll von dem Telefon unterstützt wird.
					Dabei wird für dieses Attribut keine Standard-Syntaxdefinition verwendet, sondern eine eigens dafür deklarierte Klasse <classname>SynVoIP_Protocols</classname>.
					(Der Quellcode dieser Klasse folgt in einem späteren Abschnitt).
					Die Syntax der Klasse definiert eine Auswahlliste mit einer vordefinierten Menge an Möglichkeiten.
					Durch den Parameter <varname>default </varname>wird der Wert mit dem Schlüssel ''sip'' vorausgewählt.
				</para>
				<programlisting language="python"><![CDATA[
	'protocol': univention.admin.property(
		short_description=u'Protokoll',
		long_description=u'Welches VoIP Protokoll ' + \
			u'wird von dem Telefon unterstützt',
		syntax=SynVoIP_Protocols,
		multivalue=False,
		options=[],
		required=False,
		default='sip',
		may_change=True,
		identifies=False
	),
]]></programlisting>
				<para>
					Das Attribut <property>ip</property> legt die IP-Adresse des Telefons fest.
					Als Syntaxdefinition wird die vordefinierte Klasse <classname>univention.admin.syntax.ipAddress</classname> angeben.
					Zusätzlich wird mit dem Parameter <varname>required</varname> erzwungen, dass dieses Attribut zwingend gesetzt sein muss.
				</para>
				<programlisting language="python"><![CDATA[
	'ip': univention.admin.property(
		short_description=u'IP-Adresse',
		long_description=u'',
		syntax=univention.admin.syntax.ipAddress,
		multivalue=False,
		options=[],
		required=True,
		may_change=True,
		identifies=False
	),
]]></programlisting>
				<para>
					Das Attribut <property>priuser</property> setzt den primären Benutzer des IP-Telefons.
					Hierfür wird ebenfalls eine eigene Syntax-Definition verwendet.
					Zum Einsatz kommt dabei eine Klasse, die die gültigen Werte über einen regulären Ausdruck definiert.
					(Der Quellcode wird später dargestellt)
				</para>
				<programlisting language="python"><![CDATA[
	'priuser': univention.admin.property(
		short_description=u'primärer Benutzer',
		long_description=u'Der primäre Benutzer ' + \
			u'dieses Telefons',
		syntax=SynVoIP_Address,
		multivalue=False,
		options=[],
		required=True,
		may_change=True,
		identifies=False
	),
]]></programlisting>
				<para>
					Das Attribut <property>users</property> zeigt die Verwendung von Optionen.
					Mit dem Parameter ''options=['extended']'' wird festgelegt, dass dieses Attribut nur zur Verfügung steht, wenn mindestens eine der aufgelisteten Optionen aktiviert ist.
					Ist die Liste der angegeben Optionen leer (vordefinierter Wert), wird das Attribut immer angezeigt.
				</para>
				<programlisting language="python"><![CDATA[
	'users': univention.admin.property(
		short_description=u'weitere Benutzer',
		long_description=u'Benutzer, die an diesem ' + \
			u'Telefon registriert sein dürfen',
		syntax=SynVoIP_Address,
		multivalue=True,
		options=['extended'],
		required=False,
		may_change=True,
		identifies=False
	)
}
]]></programlisting>
				<para>
					Die folgenden zwei Klassen sind die Syntaxdefinitionen, die für die Attribute <property>protocols</property>, <property>priuser</property> und <property>users</property> verwendet wurden.
					<classname>SynVoIP_Protocols</classname> basiert auf der vordefinierten Klasse <classname>univention.admin.syntax.select</classname>, die die Basisfunktionalität für Auswahllisten zur Verfügung stellt.
					Abgeleitete Klassen müssen, wie in der folgenden Klasse zu sehen ist, nur einen Namen und die Liste der Auswahlmöglichkeiten definieren.
				</para>
				<para>
					Das Attribut <varname>choices</varname> besteht aus einer Liste von Paaren, die aus einem eindeutigen Schlüssel für das Element und dem Text, der angezeigt werden soll, bestehen.
				</para>
				<programlisting language="python"><![CDATA[
class SynVoIP_Protocols(univention.admin.syntax.select):
	name = u'VoIP_Protocol'
	choices = [('sip', u'SIP'), ('h323', u'H.323'), ('skype', u'Skype')]
]]></programlisting>
				<para>
					Die andere Syntaxdefinition — <classname>SynVoIP_Address</classname> — basiert auf der Klasse <classname>univention.admin.syntax.simple</classname>, die eine Basisfunktionalität für Syntaxdefinitionen bietet, die mit regulären Ausdrücken arbeiten.
					Wie bei der anderen Definition muss ein Name vergeben werden.
					Zusätzlich sind noch die Attribute ''min_length'' und ''max_length'' anzugeben, die eine minimale und eine maximale Länge für zulässige Werte festlegen.
					Wird eines dieser Attribute auf ''0'' gesetzt, entspricht das einer nicht existenten Grenze in die jeweilige Richtung.
					Außer den genannten Attributen muss noch die Funktion <function>parse()</function> definiert werden, die als Parameter den zu prüfenden Wert übergeben bekommt.
					Mittels des Python Moduls <package>re</package> wird in diesem Fall geprüft, ob der Wert dem Muster einer VoIP Adresse entspricht, z.B. <literal>sip:hans@mustermann.de</literal>.
				</para>
				<programlisting language="python"><![CDATA[
class SynVoIP_Address(univention.admin.syntax.simple):
	name = 'VoIP_Address'
	min_length = 4
	max_length = 256
	_re = re.compile('((^(sip|h323|skype):)?([a-zA-Z])[a-zA-Z0-9._-]+)@[a-zA-Z0-9._-]+$')

	def parse(self, text):
		if self._re.match(text) is not None:
			return text
		raise univention.admin.uexceptions.valueError(
			u'Keine gültige VoIP Adresse')
]]></programlisting>
				<para>
					Anschließend wird die Abbildung von den Modul-Attributen auf die Attribute des zu erzeugenden LDAP-Objektes definiert (<xref linkend="udm:modules:globals:mapping"/>).
					Dabei wird die Klasse <classname>univention.admin.mapping.mapping</classname> verwendet, die mit der Funktion <function>register()</function> eine einfache Möglichkeit bietet, für die einzelnen Attribute Abbildungen zu registrieren.
					Das erste Argument der Funktion ist der Name des Modul-Attributs und das zweite der Name des LDAP-Attribute.
					Mit den folgenden zwei Argument der Funktion <function>register()</function> können Abbildungsfunktionen für die Konvertierung von der Modul-Attributen zum LDAP-Attribute und vice versa angegeben werden.
				</para>
				<programlisting language="python"><![CDATA[
mapping = univention.admin.mapping.mapping()
mapping.register('name', 'cn', None, univention.admin.mapping.ListToString)
mapping.register('active', 'testPhoneActive', boolToString, stringToBool)
mapping.register('protocol', 'testPhoneProtocol', None, univention.admin.mapping.ListToString)
mapping.register('ip', 'testPhoneIP', None, univention.admin.mapping.ListToString)
mapping.register('priuser', 'testPhonePrimaryUser', None, univention.admin.mapping.ListToString)
mapping.register('users', 'testPhoneUsers')
]]></programlisting>
				<para>
					Abschließend muss für das Modul noch eine Klasse ''object'' (<xref linkend="udm:modules:class"/>) definiert werden, die den in <xref linkend="udm:modules:structure"/> definierten Vorgaben entspricht.
					Für das IP-Telefon würde die Klasse folgendermaßen aussehen:
				</para>
				<programlisting language="python"><![CDATA[
class object(univention.admin.handlers.simpleLdap):
	module = module

		def _ldap_addlist(self):
			return [('objectClass', ['top', 'testPhone' ])]
]]></programlisting>
				<para>
					Damit auch nach Objekten, die dieses Modul verwaltet, gesucht werden kann gibt es noch zwei Funktionen <function>lookup()</function> und <function>identify()</function> (<xref linkend="udm:modules:functions"/>).
					Die hier vorgegebenen Funktionen sollten für einfache LDAP-Objekte, die durch eine einzelne <classname>objectClass</classname> identifiziert werden können, ausreichen.
					Für eigene LDAP-Objekte müsste die Objektklasse <classname>testPhone</classname> ersetzt werden.
				</para>
				<programlisting language="python"><![CDATA[
	@classmethod
	def unmapped_lookup_filter(cls):
		return univention.admin.filter.conjunction('&', [
			univention.admin.filter.expression('objectClass', 'testPhone'),])

lookup = object.lookup
]]></programlisting>
				<para>
					Diese Funktion prüft, ob das übergebene LDAP-Objekt zu der von diesem Modul verwalteten Menge gehört.
				</para>
				<programlisting language="python"><![CDATA[
def identify(dn, attr, canonical=0):
	return 'testPhone' in attr.get('objectClass', [])
]]></programlisting>
			</section>

			<section id="udm:modules:example:ldap">
				<title>LDAP schema extension for the example module</title>
				<para>
					Bevor das entwickelte Modul für den &ucsUDM; genutzt werden kann, muss dem LDAP-Server erst noch die neue Objektklasse, in diesem Fall <classname>testPhone</classname>, zusammen mit ihren Attributen bekannt gemacht werden.
					Solche Objektdefinitionen werden bei LDAP über sogenannte Schemata definiert, die in Dateien beschrieben werden, die wie folgt aussehen:
				</para>
				<programlisting language="ldif"><![CDATA[
attributetype ( 1.3.6.1.4.1.10176.9999.1.1 NAME 'testPhoneActive'
    DESC 'state of the IP phone'
    EQUALITY caseIgnoreIA5Match
    SYNTAX 1.3.6.1.4.1.1466.115.121.1.26 SINGLE-VALUE )

attributetype ( 1.3.6.1.4.1.10176.9999.1.2 NAME 'testPhoneProtocol'
    DESC 'The supported VoIP protocol'
    EQUALITY caseExactIA5Match
    SYNTAX 1.3.6.1.4.1.1466.115.121.1.26 SINGLE-VALUE )

attributetype ( 1.3.6.1.4.1.10176.9999.1.3 NAME 'testPhoneIP'
    DESC 'The IP address of the phone'
    EQUALITY caseExactIA5Match
    SYNTAX 1.3.6.1.4.1.1466.115.121.1.26 SINGLE-VALUE )

attributetype ( 1.3.6.1.4.1.10176.9999.1.4 NAME 'testPhonePrimaryUser'
    DESC 'The primary user of the phone'
    EQUALITY caseIgnoreIA5Match
    SYNTAX 1.3.6.1.4.1.1466.115.121.1.26 SINGLE-VALUE )

attributetype ( 1.3.6.1.4.1.10176.9999.1.5 NAME 'testPhoneUsers'
    DESC 'A list of other users allowed to use the phone'
    EQUALITY caseIgnoreIA5Match
    SYNTAX 1.3.6.1.4.1.1466.115.121.1.26 )

objectclass ( 1.3.6.1.4.1.10176.9999.2.1 NAME 'testPhone'
    DESC 'IP Phone'
    SUP top  STRUCTURAL
    MUST ( cn $ testPhoneActive $ testPhoneProtocol $ \
    testPhoneIP $ testPhonePrimaryUser )
    MAY ( testPhoneUsers )
    )
]]></programlisting>
				<para>
					Eine ausführliche Dokumentation zur Erstellung von LDAP Schema-Dateien ist auf der <ulink url="http://www.openldap.org/">Webseite des OpenLDAP Projektes</ulink> zu finden und ist nicht Schwerpunkt dieser Dokumentation.
				</para>
			</section>

			<section id="udm:modules:example:installation">
				<title>Installing the module</title>
				<para>
					Als letzter Schritt müssen das Python-Modul und das LDAP-Schema installiert werden.
					Im folgenden werden diese beiden Schritte dokumentiert.
				</para>
				<para>
					Das Python-Modul muss in das Verzeichnis ''/usr/share/pyshared/univention/admin/handlers/'' kopiert werden, damit der &ucsUDM; es findet.
					In diesem Verzeichnis ist ein Unterverzeichnis anzulegen.
					Es sollte dem ersten Teil des Modulnamens entsprechen.
					Wenn der Name des Moduls beispielsweise <classname>test/ip-phone</classname> ist, dann sollte das Verzeichnis <filename class="directory">test/</filename> heißen.
					Das Python-Modul muss dann in dieses Verzeichnis kopiert werden.
					Idealerweise wird ein UDM-Modul wie in ein eigenes Paket integriert.
					Eine Dokumentation dazu findet sich im Artikel {{DevRef|Paketierung von Software für UCS|section=chap:packaging}}. <!-- FIXME -->
					Das neu angelegte Paket wird dann beim Aufruf von <command>univention-directory-manager modules</command> mit angezeigt.
				</para>
				<para>
					Die Datei, die das LDAP-Schema enthält, kann im Prinzip in ein beliebiges Verzeichnis kopiert werden.
					Die Schema-Definitionen von Univention werden beispielsweise in dem Verzeichnis ''/usr/share/univention-ldap/schema/'' abgelegt.
					Damit der LDAP-Server dieses Schema findet muss es in die Konfigurationsdatei ''/etc/ldap/slapd.conf'' eingebunden werden.
					Da diese Datei unter der Kontrolle von Univention Configuration Registry steht, sollte nicht direkt die Datei editiert werden, sondern ein Univention Configuration Registry-Template erstellt werden (siehe {{Handbuch UCS|UCS-Handbuch}}). <!-- FIXME -->
				</para>
			</section>
		</section>
	</section>

	<section id="udm:syntax">
		<title>UDM Syntax</title>
		<remark>PMH: Bug #24236</remark>
		<para>
			Every <acronym>UDM</acronym> property has a syntax, which is used to check the value for correctness.
			&ucsUCS; already provides several syntax types, which are defined in the Python file <filename>/usr/lib/python3/dist-packages/univention/admin/syntax.py</filename>.
			The following list of syntaxes is not complete, for a complete overview the file should be consulted directly.
		</para>
		<variablelist>
			<varlistentry>
				<term><classname>string</classname></term>
				<term><classname>string64</classname></term>
				<term><classname>OneThirdString</classname></term>
				<term><classname>HalfString</classname></term>
				<term><classname>TwoThirdsString</classname></term>
				<term><classname>FourThirdsString</classname></term>
				<term><classname>OneAndAHalfString</classname></term>
				<term><classname>FiveThirdsString</classname></term>
				<term><classname>TextArea</classname></term>
				<listitem>
					<simpara>
						Different string classes, which are mapped in &ucsUMC; to text input widgets with different widths and heights.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><classname>string_numbers_letters_dots</classname></term>
				<term><classname>string_numbers_letters_dots_spaces</classname></term>
				<term><classname>IA5string</classname></term>
				<term>...</term>
				<listitem>
					<simpara>
						Different string classes with restrictions on the allowed character set.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><classname>Upload</classname></term>
				<term><classname>Base64Upload</classname></term>
				<term><classname>jpegPhoto</classname></term>
				<listitem>
					<simpara>
						Binary data.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><classname>integer</classname></term>
				<listitem>
					<simpara>
						Positive integers.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><classname>boolean</classname></term>
				<term><classname>booleanNone</classname></term>
				<term><classname>TrueFalse</classname></term>
				<term><classname>TrueFalseUpper</classname></term>
				<term><classname>TrueFalseUp</classname></term>
				<listitem>
					<simpara>
						Different boolean types which map to <literal>yes</literal> and <literal>no</literal> or <literal>true</literal> and <literal>false</literal>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><classname>hostName</classname></term>
				<term><classname>DNS_Name</classname></term>
				<term><classname>windowsHostName</classname></term>
				<term><classname>ipv4Address</classname></term>
				<term><classname>ipAddress</classname></term>
				<term><classname>hostOrIP</classname></term>
				<term><classname>v4netmask</classname></term>
				<term><classname>netmask</classname></term>
				<term><classname>IPv4_AddressRange</classname></term>
				<term><classname>IP_AddressRange</classname></term>
				<term>...</term>
				<listitem>
					<simpara>
						Different classes for host names or addresses.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><classname>unixTime</classname></term>
				<term><classname>TimeString</classname></term>
				<term><classname>iso8601Date</classname></term>
				<term><classname>date</classname></term>
				<listitem>
					<simpara>
						Date and time.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><classname>GroupDN</classname></term>
				<term><classname>UserDN</classname></term>
				<term><classname>UserID</classname></term>
				<term><classname>HostDN</classname></term>
				<term><classname>DomainController</classname></term>
				<term><classname>Windows_Server</classname></term>
				<term><classname>UCS_Server</classname></term>
				<term>...</term>
				<listitem>
					<simpara>
						Dynamic classes, which do an <acronym>LDAP</acronym> search to provide a list of selectable values like users, groups and hosts
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><classname>LDAP_Search</classname></term>
				<term><classname>UDM_Objects</classname></term>
				<term><classname>UDM_Attribute</classname></term>
				<listitem>
					<simpara>
						These syntaxes do an <acronym>LDAP</acronym> search and display the result as a list.
						They are further described in <xref linkend="udm:syntax:ldap"/>.
					</simpara>
				</listitem>
			</varlistentry>
		</variablelist>
		<para>
			Additional syntax classes can be added by placing a Python file in <filename class="directory">/usr/lib/python3/dist-packages/univention/admin/syntax.d/</filename>.
			They're automatically imported by <acronym>UDM</acronym>.
		</para>

		<section id="udm:syntax:overwrite">
			<title>UDM Syntax Override
				<indexterm><primary>Directory Manager</primary><secondary>Syntax override</secondary></indexterm>
			</title>
			<para>
				Sometimes the predefined syntax is inappropriate in some scenarios.
				This can be because of performance problems with <acronym>LDAP</acronym> searches or the need for more restrictive or lenient value checking.
				The latter case might require a change to the <acronym>LDAP</acronym> schema, since <command>slapd</command> also checks the provided values for correctness.
			</para>
			<para>
				The syntax of UDM properties can be overwritten by using &ucsUCRV;s.
				For each module and each property the variable <envar>directory/manager/web/modules/<replaceable>module</replaceable>/properties/<replaceable>property</replaceable>/syntax</envar> can be set to the name of a syntax class.
				For example <envar>directory/manager/web/modules/users/user/properties/username/syntax</envar><literal>=uid</literal> would restrict the name of users to not contain umlauts.
			</para>
			<para>
				Since UCR variables only affect the local system, the variables must be set on all systems were <acronym>UDM</acronym> is used.
				This can be either done through a &ucsUCR; policy (see <olink targetdoc="ucs-5.0" targetptr="central:policies"/>) or by setting the variable in the <filename>.postinst</filename> script of some package, which is installed on all hosts.
			</para>
		</section>

		<section id="udm:syntax:ldap">
			<title>UDM LDAP search
				<indexterm><primary>Directory Manager</primary><secondary>LDAP search</secondary></indexterm>
			</title>
			<para>
				It is often required to present a list of entries to the user, from which she can select one or — in case of a multi-valued property — more entries.
				Several syntax classes derived from <classname>select</classname> provide a fixed list of choices.
				If the set of values is known and fixed, it's best to derive an own class from <classname>select</classname> and provide the Python file in <filename class="directory">/usr/lib/python3/dist-packages/univention/admin/syntax.d/</filename>.
			</para>
			<para>
				If on the other hand the list is dynamic and is stored in <acronym>LDAP</acronym>, <acronym>UDM</acronym> provides three methods to retrieve the values.
			</para>
			<variablelist>
				<varlistentry><term><classname>UDM_Attribute</classname></term>
					<listitem>
						<!-- univention-management-console-module-udm/umc/python/udm/udm_ldap.py -->
						<para>
							This class does a <acronym>UDM</acronym> search.
							For each object found all values of a multi-valued property are returned.
						</para>
						<para>
							For a derived class the following class variables can be used to customize the search:
						</para>
						<variablelist>
							<varlistentry><term>udm_module</term>
								<listitem>
									<simpara>
										The name of the <acronym>UDM</acronym> module, which does the <acronym>LDAP</acronym> search and retrieves the properties.
									</simpara>
								</listitem>
							</varlistentry>
							<varlistentry><term>udm_filter</term>
								<listitem>
									<simpara>
										An <acronym>LDAP</acronym> search filter which is used by the <acronym>UDM</acronym> module to filter the search.
										The special value <literal>dn</literal> skips the search and directly returns the property of the <acronym>UDM</acronym> object specified by <literal>depends</literal>.
									</simpara>
								</listitem>
							</varlistentry>
							<varlistentry><term>attribute</term>
								<listitem>
									<simpara>
										The name of a multi-valued <acronym>UDM</acronym> property which stores the values to be returned.
									</simpara>
								</listitem>
							</varlistentry>
							<varlistentry>
								<term>is_complex</term>
								<term>key_index</term>
								<term>label_index</term>
								<listitem>
									<simpara>
										Some <acronym>UDM</acronym> properties consist of multiple parts, so called <firstterm>complex</firstterm> properties.
										These variables are used to define, which part is displayed as the label and which part is used to reference the entry.
									</simpara>
								</listitem>
							</varlistentry>
							<varlistentry><term>label_format</term>
								<listitem>
									<simpara>
										A Python format string, which is used to format the <acronym>UDM</acronym> properties to a label string presented to the user.
										<literal>%(<replaceable>property-name</replaceable>)s</literal> should be used to reference properties.
										The special property name <literal>$attribute$</literal> is replaced by the value of variable <varname>attribute</varname> declared above.
									</simpara>
								</listitem>
							</varlistentry>
							<varlistentry><term>regex</term>
								<listitem>
									<simpara>
										This defines an optional regular expression, which is used in the frontend to check the value for validity.
									</simpara>
								</listitem>
							</varlistentry>
							<varlistentry><term>static_values</term>
								<listitem>
									<simpara>
										A list of two-tuples <literal>(value, display-string)</literal>, which are added as additional selection options.
									</simpara>
								</listitem>
							</varlistentry>
							<varlistentry><term>empty_value</term>
								<listitem>
									<simpara>
										If set to <literal>True</literal>, the empty value is inserted before all other static and dynamic entries.
									</simpara>
								</listitem>
							</varlistentry>
							<varlistentry><term>depends</term>
								<listitem>
									<simpara>
										This variable may contain the name of another property, which this property depends on.
										This can be used to link two properties.
										For example, one property can be used to select a server, while the second dependent property then only lists the services provided by that selected host.
										For the dependent syntax <varname>attribute</varname> must be set to <literal>dn</literal>.
									</simpara>
								</listitem>
							</varlistentry>
							<varlistentry><term>error_message</term>
								<listitem>
									<simpara>
										This error message is shown when the user enters a value which is not in the set of allowed values.
									</simpara>
								</listitem>
							</varlistentry>
						</variablelist>
						<para>
							The following example syntax would provide a list of all users with their telephone numbers:
						</para>
						<programlisting language="python"><![CDATA[
class DelegateTelephonedNumber(UDM_Attribute):
	udm_module = 'users/user'
	attribute = 'phone'
	label_format = '%(displayName)s: %($attribute$)s'
						]]></programlisting>
					</listitem>
				</varlistentry>
				<varlistentry><term><classname>UDM_Objects</classname></term>
					<listitem>
						<para>
							This class performs a <acronym>UDM</acronym> search returning each object found.
						</para>
						<para>
							For a derived class the following class variables can be used to customize the search:
						</para>
						<variablelist>
							<varlistentry><term>udm_modules</term>
								<listitem>
									<simpara>
										A List of one or more <acronym>UDM</acronym> modules, which do the <acronym>LDAP</acronym> search and retrieve the properties.
									</simpara>
								</listitem>
							</varlistentry>
							<varlistentry><term>key</term>
								<listitem>
									<simpara>
										A Python format string generating the key value used to identify the selected object.
										The default is <literal>dn</literal>, which uses the distinguished name of the object.
									</simpara>
								</listitem>
							</varlistentry>
							<varlistentry><term>label</term>
								<listitem>
									<simpara>
										A Python format string generating the display label to represent the selected object.
										The default is <literal>None</literal>, which uses the <acronym>UDM</acronym> specific <varname>description</varname>.
										<literal>dn</literal> can be used to use the distinguished name.
									</simpara>
								</listitem>
							</varlistentry>
							<varlistentry><term>regex</term>
								<listitem>
									<simpara>
										This defines an optional regular expression, which is used in the frontend to check the value for validity.
										By default only valid distinguished names are accepted.
									</simpara>
								</listitem>
							</varlistentry>
							<varlistentry><term>simple</term>
								<listitem>
									<simpara>
										By default a widget for selecting multiple entries is used.
										Setting this variable to <literal>True</literal> changes the widget to a combo-box widget, which only allows to select a single value.
										This should be in-sync with the <literal>multivalue</literal> property of <acronym>UDM</acronym> properties.
									</simpara>
								</listitem>
							</varlistentry>
							<varlistentry><term>use_objects</term>
								<listitem>
									<simpara>
										By default <acronym>UDM</acronym> opens each <acronym>LDAP</acronym> object through a <acronym>UDM</acronym> module implemented in Python.
										This can be a performance problem if many entries are returned.
										Setting this to <literal>False</literal> disables the Python code and directly uses the attributes returned by the <acronym>LDAP</acronym> search.
										Several properties can then no longer be used as key or label, as those are not explicitly stored in <acronym>LDAP</acronym> but are only calculated by the <acronym>UDM</acronym> module.
										For example, to get the fully qualified domain name of a host <literal>%(name)s.%(domain)s</literal> must be used instead of the calculated property <literal>%(fqdn)s</literal>.
									</simpara>
								</listitem>
							</varlistentry>
							<varlistentry>
								<term>udm_filter</term>
								<term>static_values</term>
								<term>empty_value</term>
								<term>depends</term>
								<term>error_message</term>
								<listitem>
									<simpara>
										Same as above with <literal>UDM_Attribute</literal>.
									</simpara>
								</listitem>
							</varlistentry>
						</variablelist>
						<para>
							The following example syntax would provide a list of all servers providing a required service:
						</para>
						<programlisting language="python"><![CDATA[
class MyServers(UDM_Objects):
	udm_modules = (
		'computers/domaincontroller_master',
		'computers/domaincontroller_backup',
		'computers/domaincontroller_slave',
		'computers/memberserver',
		)
	label = '%(fqdn)s'
	udm_filter = 'service=MyService'
						]]></programlisting>
					</listitem>
				</varlistentry>
				<varlistentry><term><classname>LDAP_Search</classname></term>
					<listitem>
						<para>
							This is the old implementation, which should only be used, if <classname>UDM_Attribute</classname> and <classname>UDM_Objects</classname> are not sufficient.
							In addition to ease of use it has the drawback that &ucsUMC; can not do as much caching, which can lead to severe performance problems.
						</para>
						<para>
							<acronym>LDAP</acronym> search syntaxes can be declared in two equivalent ways:
						</para>
						<variablelist>
							<varlistentry>
								<term><firstterm>Python API</firstterm></term>
								<listitem>
									<simpara>
										By implementing a Python class derived from <classname>LDAP_Search</classname> and providing that implementation in <filename>/usr/lib/python3/dist-packages/univention/admin/syntax.d/</filename>.
									</simpara>
								</listitem>
							</varlistentry>
							<varlistentry>
								<term><firstterm>UDM API</firstterm></term>
								<listitem>
									<simpara>
										By creating a <acronym>UDM</acronym> object in <acronym>LDAP</acronym> using the module <classname>settings/syntax</classname>.
									</simpara>
								</listitem>
							</varlistentry>
						</variablelist>
						<para>
							The Python API uses the following variables:
						</para>
						<variablelist>
							<varlistentry><term><varname>syntax_name</varname></term>
								<listitem>
									<simpara>
										This variable stores the common name of the <acronym>LDAP</acronym> object, which is used to define the syntax.
										It is only used internally and should never be needed when creating syntaxes programmatically.
									</simpara>
								</listitem>
							</varlistentry>
							<varlistentry><term><varname>filter</varname></term>
								<listitem>
									<simpara>
										An <acronym>LDAP</acronym> filter to find the LDAP objects providing the list of choices.
									</simpara>
								</listitem>
							</varlistentry>
							<varlistentry><term><varname>attribute</varname></term>
								<listitem>
									<simpara>
										A list of <acronym>UDM</acronym> module property definitions like "<literal>shares/share: dn</literal>".
										They are used as the human readable label for each element of the choices.
									</simpara>
								</listitem>
							</varlistentry>
							<varlistentry><term><varname>value</varname></term>
								<listitem>
									<simpara>
										The <acronym>UDM</acronym> module attribute that will be stored to identify the selected element.
										The value is specified like <literal>shares/share: dn</literal>
									</simpara>
								</listitem>
							</varlistentry>
							<varlistentry><term><varname>viewonly</varname></term>
								<listitem>
									<simpara>
										If set to <literal>True</literal> the values can not be changed.
									</simpara>
								</listitem>
							</varlistentry>
							<varlistentry><term><varname>addEmptyValue</varname></term>
								<listitem>
									<simpara>
										If set to <literal>True</literal> the empty value is add to the list of choices.
									</simpara>
								</listitem>
							</varlistentry>
							<varlistentry><term><varname>appendEmptyValue</varname></term>
								<listitem>
									<simpara>
										Same as <varname>addEmptyValue</varname> but added at the end.
										Used to automatically choose an existing entry in the frontend.
									</simpara>
								</listitem>
							</varlistentry>
						</variablelist>
						<programlisting language="python"><![CDATA[
class MyServers(LDAP_Search):
	def __init__(self):
		LDAP_Search.__init__(self,
			filter=('(&(univentionService=MyService)'
				'(univentionServerRole=member))'),
			attribute=(
				'computers/memberserver: fqdn',
				),
			value='computers/memberserver: dn'
		)
		self.name = 'LDAP_Search'  # required workaround
						]]></programlisting>
						<para>
							The <acronym>UDM</acronym> API uses the following properties:
						</para>
						<variablelist>
							<varlistentry><term><literal>name</literal> (required)</term>
								<listitem>
									<simpara>
										The name for the syntax.
									</simpara>
								</listitem>
							</varlistentry>
							<varlistentry><term><literal>description</literal> (optional)</term>
								<listitem>
									<simpara>
										Some descriptive text.
									</simpara>
								</listitem>
							</varlistentry>
							<varlistentry><term><literal>filter</literal> (required)</term>
								<listitem>
									<simpara>
										An <acronym>LDAP</acronym> filter, which is used to find the objects.
									</simpara>
								</listitem>
							</varlistentry>
							<varlistentry><term><literal>base</literal> (optional)</term>
								<listitem>
									<simpara>
										The <acronym>LDAP</acronym> base, where the search starts.
									</simpara>
								</listitem>
							</varlistentry>
							<varlistentry>
								<term><literal>attribute</literal> (optional, multivalued)</term>
								<term><literal>ldapattribute</literal> (optional, multivalued)</term>
								<listitem>
									<simpara>
										The name of <acronym>UDM</acronym> properties, which are display as a label to the user.
										Alternatively <acronym>LDAP</acronym> attribute names may be used directly.
									</simpara>
								</listitem>
							</varlistentry>
							<varlistentry>
								<term><literal>value</literal> (optional)</term>
								<term><literal>ldapvalue</literal> (optional)</term>
								<listitem>
									<simpara>
										The name of the <acronym>UDM</acronym> property, which is used to reference the object.
										Alternatively an <acronym>LDAP</acronym> attribute name may be used directly.
									</simpara>
								</listitem>
							</varlistentry>
							<varlistentry><term><literal>viewonly</literal> (optional)</term>
								<listitem>
									<simpara>
										If set to <literal>1</literal> the values can not be changed.
									</simpara>
								</listitem>
							</varlistentry>
							<varlistentry><term><literal>addEmptyValue</literal> (optional)</term>
								<listitem>
									<simpara>
										If set to <literal>1</literal> the empty value is add to the list of choices.
									</simpara>
								</listitem>
							</varlistentry>
						</variablelist>
						<programlisting language="sh"><![CDATA[
eval "$(ucr shell)"
udm settings/syntax create "$@" --ignore_exists \
	--position "cn=custom attributes,cn=univention,$ldap_base" \
	--set name=MyServers \
	--set filter='(&(univentionService=MyService)
		(univentionServerRole=member))' \
	--set attribute='computers/memberserver: fqdn' \
	--set value='computers/memberserver: dn'
						]]></programlisting>
					</listitem>
				</varlistentry>
			</variablelist>
		</section>
	</section>

	<section id="settings:udm_hook">
		<title>Packaging UDM Hooks
			<indexterm><primary>Directory Manager</primary><secondary>Hooks</secondary><tertiary>Packaging</tertiary></indexterm>
		</title>
		<para>
			For some purposes, e.g. for app installation, it is convenient to be able to deploy a new <acronym>UDM</acronym> hook in the UCS domain from any system in the domain.
			For this purpose, a UDM hook can be stored as a special type of UDM object.
			The module responsible for this type of objects is called <classname>settings/udm_hook</classname>.
			As these objects are replicated throughout the UCS domain, the UCS servers listen for modifications on these objects and integrate them into the local <acronym>UDM</acronym>.
		</para>
		<para>
			The commands to create the <acronym>UDM</acronym> hook objects in UDM may be put into any join script (see <xref linkend="chap:join"/>).
			Like every <acronym>UDM</acronym> object a <acronym>UDM</acronym> hook object can be created by using the <acronym>UDM</acronym> command line interface <command>univention-directory-manager</command> or its alias <command>udm</command>.
			<acronym>UDM</acronym> hook objects can be stored anywhere in the <acronym>LDAP</acronym> directory, but the recommended location would be <literal>cn=udm_hook,cn=univention,</literal> below the <acronym>LDAP</acronym> base.
			Since the join script creating the attribute may be called on multiple hosts, it is a good idea to add the <option>--ignore_exists</option> option, which suppresses the error exit code in case the object already exists in <acronym>LDAP</acronym>.
		</para>
		<para>
			The module <classname>settings/udm_hook</classname> requires several parameters.
			Since many of these are determined automatically by the <command>ucs_registerLDAPExtension</command> shell library function, it is recommended to use the shell library function to create these objects (see <xref linkend="join:libraries:shell"/>).
		</para>
		<variablelist>
			<varlistentry><term><literal>name</literal> (required)</term>
				<listitem>
					<simpara>
						Name of the UDM hook.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>data</literal> (required)</term>
				<listitem>
					<simpara>
						The actual UDM hook data in bzip2 and base64 encoded format.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>filename</literal> (required)</term>
				<listitem>
					<simpara>
						The file name the UDM hook data should be written to by the listening servers.
						The file name must not contain any path elements.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>package</literal> (required)</term>
				<listitem>
					<simpara>
						Name of the Debian package which creates the object.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>packageversion</literal> (required)</term>
				<listitem>
					<simpara>
						Version of the Debian package which creates the object.
						For object modifications the version number needs to increase unless the package name is modified as well.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>appidentifier</literal> (optional)</term>
				<listitem>
					<simpara>
						The identifier of the app which creates the object.
						This is important to indicate that the object is required as long as the app is installed anywhere in the UCS domain.
						Defaults to <literal>string</literal>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>ucsversionstart</literal> (optional)</term>
				<listitem>
					<simpara>
						Minimal required UCS version.
						The UDM hook is only activated by systems with a version higher than or equal to this.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>ucsversionend</literal> (optional)</term>
				<listitem>
					<simpara>
						Maximal required UCS version.
						The UDM hook is only activated by systems with a version lower than or equal to this.
						To  specify validity for the whole <productnumber>5.0-x</productnumber> release range a value like <literal>5.0-99</literal> may be used.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>active</literal> (internal)</term>
				<listitem>
					<simpara>
						A boolean flag used internally by the &ucsPrimaryDN; to signal availability of the new UDM hook on the &ucsPrimaryDN; (default: <literal>FALSE</literal>).
					</simpara>
				</listitem>
			</varlistentry>
		</variablelist>
	</section>

	<section id="settings:udm_module">
		<title>Packaging UDM Extension Modules</title>
		<para>
			For some purposes, e.g. for app installation, it is convenient to be able to deploy a new <acronym>UDM</acronym> module in the UCS domain from any system in the domain.
			For this purpose, a UDM module can be stored as a special type of UDM object.
			The module responsible for this type of objects is called <classname>settings/udm_module</classname>.
			As these objects are replicated throughout the UCS domain, the UCS servers listen for modifications on these objects and integrate them into the local <acronym>UDM</acronym>.
		</para>
		<para>
			The commands to create the <acronym>UDM</acronym> module objects in UDM may be put into any join script (see <xref linkend="chap:join"/>).
			Like every <acronym>UDM</acronym> object a <acronym>UDM</acronym> module object can be created by using the <acronym>UDM</acronym> command line interface <command>univention-directory-manager</command> or its alias <command>udm</command>.
			<acronym>UDM</acronym> module objects can be stored anywhere in the <acronym>LDAP</acronym> directory, but the recommended location would be <literal>cn=udm_module,cn=univention,</literal> below the <acronym>LDAP</acronym> base.
			Since the join script creating the attribute may be called on multiple hosts, it is a good idea to add the <option>--ignore_exists</option> option, which suppresses the error exit code in case the object already exists in <acronym>LDAP</acronym>.
		</para>
		<para>
			The module <classname>settings/udm_module</classname> requires several parameters.
			Since many of these are determined automatically by the <command>ucs_registerLDAPExtension</command> shell library function, it is recommended to use the shell library function to create these objects (see <xref linkend="join:libraries:shell"/>).
		</para>
		<variablelist>
			<varlistentry><term><literal>name</literal> (required)</term>
				<listitem>
					<simpara>
						Name of the UDM module, e.g. <classname>newapp/someobject</classname>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>data</literal> (required)</term>
				<listitem>
					<simpara>
						The actual UDM module data in bzip2 and base64 encoded format.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>filename</literal> (required)</term>
				<listitem>
					<simpara>
						The file name the UDM module data should be written to by the listening servers.
						The file name may contain path elements and should conform to the name of the UDM module (e.g. <literal>newapp/someobject.py</literal>).
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>messagecatalog</literal> (optional)</term>
				<listitem>
					<simpara>
						Multivalued property to supply message translation files (syntax: &lt;language tag&gt; &lt;base64 encoded GNU message catalog&gt;).
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>umcregistration</literal> (optional)</term>
				<listitem>
					<simpara>
						XML definition required to make the UDM module available though the Univention Management Console (base64 encoded XML)
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>icon</literal> (optional)</term>
				<listitem>
					<simpara>
						Multivalued property to supply icons for the Univention Management Console (base64 encoded <filename class="extension">png</filename>, <filename class="extension">jpeg</filename> or <filename class="extension">svgz</filename>).
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>package</literal> (required)</term>
				<listitem>
					<simpara>
						Name of the Debian package which creates the object.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>packageversion</literal> (required)</term>
				<listitem>
					<simpara>
						Version of the Debian package which creates the object.
						For object modifications the version number needs to increase unless the package name is modified as well.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>appidentifier</literal> (optional)</term>
				<listitem>
					<simpara>
						The identifier of the app which creates the object.
						This is important to indicate that the object is required as long as the app is installed anywhere in the UCS domain.
						Defaults to <literal>string</literal>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>ucsversionstart</literal> (optional)</term>
				<listitem>
					<simpara>
						Minimal required UCS version.
						The UDM module is only activated by systems with a version higher than or equal to this.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>ucsversionend</literal> (optional)</term>
				<listitem>
					<simpara>
						Maximal required UCS version.
						The UDM module is only activated by systems with a version lower than or equal to this.
						To  specify validity for the whole <productnumber>5.0-x</productnumber> release range a value like <literal>5.0-99</literal> may be used.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>active</literal> (internal)</term>
				<listitem>
					<simpara>
						A boolean flag used internally by the &ucsPrimaryDN; to signal availability of the new UDM module on the &ucsPrimaryDN; (default: <literal>FALSE</literal>).
					</simpara>
				</listitem>
			</varlistentry>
		</variablelist>
	</section>

	<section id="settings:udm_syntax">
		<title>Packaging UDM Syntax Extension</title>
		<para>
			For some purposes, e.g. for app installation, it is convenient to be able to deploy a new <acronym>UDM</acronym> syntax in the UCS domain from any system in the domain.
			For this purpose, a UDM syntax can be stored as a special type of UDM object.
			The module responsible for this type of objects is called <classname>settings/udm_syntax</classname>.
			As these objects are replicated throughout the UCS domain, the UCS servers listen for modifications on these objects and integrate them into the local <acronym>UDM</acronym>.
		</para>
		<para>
			The commands to create the <acronym>UDM</acronym> syntax objects in UDM may be put into any join script (see <xref linkend="chap:join"/>).
			Like every <acronym>UDM</acronym> object a <acronym>UDM</acronym> syntax object can be created by using the <acronym>UDM</acronym> command line interface <command>univention-directory-manager</command> or its alias <command>udm</command>.
			<acronym>UDM</acronym> syntax objects can be stored anywhere in the <acronym>LDAP</acronym> directory, but the recommended location would be <literal>cn=udm_syntax,cn=univention,</literal> below the <acronym>LDAP</acronym> base.
			Since the join script creating the attribute may be called on multiple hosts, it is a good idea to add the <option>--ignore_exists</option> option, which suppresses the error exit code in case the object already exists in <acronym>LDAP</acronym>.
		</para>
		<para>
			The module <classname>settings/udm_syntax</classname> requires several parameters.
			Since many of these are determined automatically by the <command>ucs_registerLDAPExtension</command> shell library function, it is recommended to use the shell library function to create these objects (see <xref linkend="join:libraries:shell"/>).
		</para>
		<variablelist>
			<varlistentry><term><literal>name</literal> (required)</term>
				<listitem>
					<simpara>
						Name of the UDM syntax.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>data</literal> (required)</term>
				<listitem>
					<simpara>
						The actual UDM syntax data in bzip2 and base64 encoded format.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>filename</literal> (required)</term>
				<listitem>
					<simpara>
						The file name the UDM syntax data should be written to by the listening servers.
						The file name must not contain any path elements.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>package</literal> (required)</term>
				<listitem>
					<simpara>
						Name of the Debian package which creates the object.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>packageversion</literal> (required)</term>
				<listitem>
					<simpara>
						Version of the Debian package which creates the object.
						For object modifications the version number needs to increase unless the package name is modified as well.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>appidentifier</literal> (optional)</term>
				<listitem>
					<simpara>
						The identifier of the app which creates the object.
						This is important to indicate that the object is required as long as the app is installed anywhere in the UCS domain.
						Defaults to <literal>string</literal>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>ucsversionstart</literal> (optional)</term>
				<listitem>
					<simpara>
						Minimal required UCS version.
						The UDM syntax is only activated by systems with a version higher than or equal to this.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>ucsversionend</literal> (optional)</term>
				<listitem>
					<simpara>
						Maximal required UCS version.
						The UDM syntax is only activated by systems with a version lower than or equal to this.
						To  specify validity for the whole <productnumber>5.0-x</productnumber> release range a value like <literal>5.0-99</literal> may be used.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>active</literal> (internal)</term>
				<listitem>
					<simpara>
						A boolean flag used internally by the &ucsPrimaryDN; to signal availability of the new UDM syntax on the &ucsPrimaryDN; (default: <literal>FALSE</literal>).
					</simpara>
				</listitem>
			</varlistentry>
		</variablelist>
	</section>

	<section id="udm:rest_api">
		<title>UDM REST API</title>
		<para>
			UCS provides a REST API which can be used to inspect, modify, create and delete UDM objects via HTTP requests.
		</para>

		<para>
			The API is accessible from <uri>https://<replaceable>FQHN</replaceable>/univention/udm/</uri>.
		</para>

		<section id="udm:rest_api:authentication">
			<title>Authentication</title>
			<para>
				To be able to use the API you have to authenticate with a user account which is a member of an authorized group.
				The group authorization is managed via the &ucsUCRV;s <envar>directory/manager/rest/authorized-groups/&lt;group-name&gt;</envar>.
				The API comes predefined with the UCR variables <envar>directory/manager/rest/authorized-groups/domain-admins</envar>, <envar>directory/manager/rest/authorized-groups/dc-backup</envar> and <envar>directory/manager/rest/authorized-groups/dc-slaves</envar> which authorizes the groups <systemitem class="groupname">Domain Admins</systemitem>, <systemitem class="groupname">DC Backup Hosts</systemitem> and <systemitem class="groupname">DC Slave Hosts</systemitem> respectively.
			</para>
			<para>
				To authorize additional groups you just have to create a new UCR variable.
				If you haven't already, create the group you want to authorize:
				<programlisting language="sh">
udm groups/group create --position="cn=groups,$(ucr get ldap/base)" --set name="UDM API Users"
				</programlisting>
				Now set the UCR variable to allow the group members to use the API.
			</para>
			<programlisting language="sh">
ucr set directory/manager/rest/authorized-groups/udm-api-users="cn=UDM API Users,cn=groups,$(ucr get ldap/base)"
			</programlisting>
			<note>
				<para>
					The authorization of a group only allows the group members to access the API in the first place.
					After that, which actions the user can perform with the API is regulated via ACLs.
					For example a normal <systemitem class="groupname">Domain Users</systemitem> user can't create or delete objects.
				</para>
			</note>
			<para>
				After you add or modify a &ucsUCRV; <envar>directory/manager/rest/authorized-groups/&lt;group-name&gt;</envar> you have to restart the API service for the changes to take effect.
			</para>
				<programlisting language="sh">
systemctl restart univention-directory-manager-rest
				</programlisting>
		</section>
		<section id="udm:rest_api:overview">
			<title>API overview</title>
			<para>
				You can interact with the API by sending HTTP requests to resources
				and by using different HTTP methods you can achieve different results.
			</para>
			<table>
				<title>HTTP methods</title>
				<tgroup cols="2">
					<colspec colnum="1" colname="col1" colwidth="1*"/>
					<colspec colnum="2" colname="col2" colwidth="2*"/>
					<thead>
						<row>
							<entry>Verb</entry>
							<entry>Description</entry>
						</row>
					</thead>
					<tbody>
						<row>
							<entry>GET</entry>
							<entry>Retrieve a resource</entry>
						</row>
						<row>
							<entry>POST</entry>
							<entry>Create a resource</entry>
						</row>
						<row>
							<entry>PUT</entry>
							<entry>Replace or move a resource</entry>
						</row>
						<row>
							<entry>PATCH</entry>
							<entry>Modify or move a resource</entry>
						</row>
						<row>
							<entry>DELETE</entry>
							<entry>Delete a resource</entry>
						</row>
					</tbody>
				</tgroup>
			</table>
			<para>
				For an in depth overview over which resources are available, which HTTP methods are allowed on them and which query parameters are available for a given HTTP method visit <uri>https://<replaceable>FQHN</replaceable>/univention/udm/schema/</uri> with a browser.
			</para>
			<para>
				By visiting <uri>https://<replaceable>FQHN</replaceable>/univention/udm/</uri> with a browser you can navigate and use the API interactively.
			</para>
		</section>
		<section id="udm:rest_api:usage_examples">
			<title>API usage examples</title>
			<para>
				In the following section you will learn how to create, modify, search and delete a user via the API.
			</para>
			<para>
				While you try out these examples you will often see the <wordasword>"_links"</wordasword> and <wordasword>"_embedded"</wordasword> properties in the responses.
				These properties are defined by <abbrev>HAL</abbrev>, the Hypertext Application Language, which is used in the API.
				These properties contain links which can be used to traverse the API.
				For example the <wordasword>"_links"</wordasword> property of the response to a paginated query could contain the <wordasword>"next"</wordasword> property which points to the next page.
			</para>
			<para>
				For more information on <wordasword>HAL</wordasword> please refer to the <ulink url="https://tools.ietf.org/html/draft-kelly-json-hal-08">Internet Draft for HAL</ulink>.
			</para>
			<section id="udm:rest_api:usage_examples:post">
				<title>Create a user via a POST request</title>
				<para>
					To create a new user your first want to get a template that describes a valid user and has all attributes filled out with default values.
				</para>
				<para>
					You can get the template for an UDM module with:
					<programlisting language="sh">
curl -X GET -H "Accept: application/json" \
  https://${USER}:${PASSWORD}@${FQHN}/univention/udm/${module}/add
					</programlisting>
				</para>
				<para>
					So for the users/user module you get the template with:
					<programlisting language="sh">
curl -X GET -H "Accept: application/json" \
  https://${USER}:${PASSWORD}@${FQHN}/univention/udm/users/user/add
					</programlisting>
				</para>
				<para>
					To work with the template you can save it into a file and to make it more readable you can use something like pythons <wordasword>json.tool</wordasword>.
					<programlisting language="sh">
curl -X GET -H "Accept: application/json" \
  https://${USER}:${PASSWORD}@${FQHN}/univention/udm/users/user/add |
  python -m json.tool > user_template.json
					</programlisting>
				</para>
				<para>
					The JSON file contains meta information (keys that start with underscore '_') that are not necessary to create a user.
					These can be filtered out to make it easier to work with the template file.
					The following example produces such a condensed template:
					<programlisting language="sh">
curl -X GET -H "Accept: application/json" \
  https://${USER}:${PASSWORD}@${FQHN}/univention/udm/users/user/add |
  python -c 'import sys, json; \
    template = json.load(sys.stdin); \
    template = {key:value for key, value in template.items() if not key.startswith("_")}; \
    json.dump(template, sys.stdout, indent=4)' > user_template.json
					</programlisting>
				</para>
				<para>
					The content of <filename>user_template.json</filename> should look something like this.
					<programlisting language="js">
{
    "position": "cn=users,dc=mydomain,dc=intranet",
    "objectType": "users/user",
    "options": {
        "pki": false
    },
    "policies": {
        "policies/pwhistory": [],
        "policies/umc": [],
        "policies/desktop": []
    },
    "properties": {
        "mobileTelephoneNumber": [],
        "certificateSubjectOrganisationalUnit": null,
        "groups": [],
        "sambahome": null,
        "departmentNumber": [],
        "certificateSerial": null,
        "certificateSubjectCommonName": null,
        "primaryGroup": "cn=Domain Users,cn=groups,dc=mydomain,dc=intranet",
        "uidNumber": null,
        "disabled": false,
        "unlock": false,
        "street": null,
        "postcode": null,
        "scriptpath": null,
        "sambaPrivileges": [],
        "description": null,
        "certificateIssuerCommonName": null,
        "mailForwardCopyToSelf": false,
        "employeeType": null,
        "homedrive": null,
        "overridePWLength": null,
        "title": null,
        "mailAlternativeAddress": [],
        "userCertificate": null,
        "organisation": null,
        "homeSharePath": "",
        "certificateIssuerOrganisationalUnit": null,
        "e-mail": [],
        "userexpiry": null,
        "pwdChangeNextLogin": null,
        "mailHomeServer": null,
        "unixhome": "/home/",
        "gecos": "",
        "sambaUserWorkstations": [],
        "preferredLanguage": null,
        "certificateIssuerState": null,
        "pagerTelephoneNumber": [],
        "username": null,
        "umcProperty": [],
        "certificateIssuerCountry": null,
        "homeTelephoneNumber": [],
        "shell": "/bin/bash",
        "homePostalAddress": [],
        "firstname": null,
        "certificateIssuerOrganisation": null,
        "lastname": null,
        "city": null,
        "certificateSubjectMail": null,
        "mailForwardAddress": [],
        "phone": [],
        "gidNumber": null,
        "birthday": null,
        "employeeNumber": null,
        "objectFlag": [],
        "sambaLogonHours": null,
        "certificateSubjectLocation": null,
        "displayName": "",
        "password": null,
        "lockedTime": null,
        "sambaRID": null,
        "secretary": [],
        "certificateSubjectOrganisation": null,
        "overridePWHistory": null,
        "mailPrimaryAddress": null,
        "country": null,
        "roomNumber": [],
        "certificateSubjectCountry": null,
        "locked": false,
        "certificateDateNotBefore": null,
        "passwordexpiry": null,
        "certificateVersion": null,
        "homeShare": null,
        "certificateIssuerMail": null,
        "unlockTime": null,
        "serviceprovider": [],
        "profilepath": null,
        "certificateIssuerLocation": null,
        "jpegPhoto": null,
        "certificateDateNotAfter": null,
        "certificateSubjectState": null
    }
}
					</programlisting>
				</para>
				<para>
					Now you can modify the attributes the new user should have and send the modified template, via a <command>POST</command> request, to create a new user.
					<programlisting language="sh">
curl -X POST -H "Accept: application/json" -H "Content-Type: application/json" \
  https://${USER}:${PASSWORD}@${FQHN}/univention/udm/users/user/ --data @user_template.json
					</programlisting>
				</para>
			</section>
			<section id="udm:rest_api:usage_examples:get">
				<title>Search for users via a GET request</title>
				<para>
					In this example we search for a users/user object where the property <property>firstname</property> starts with <literal>"Ale"</literal> and the property <property>lastname</property> ends with <literal>"er"</literal>.
					<programlisting language="sh">
curl -X GET -H "Accept: application/json" \
  "http://${USER}:${PASSWORD}@${FQHN}/univention/udm/users/user/?query\[firstname\]=Al%2A&amp;query\[lastname\]=%2Aer"
					</programlisting>
				</para>
				<para>
					The response should look something like this (some fields where omitted for clarity):
					<programlisting language="js">
{
    "_embedded": {
        "udm:object": [
            {
                "dn": "uid=alexpower,cn=users,dc=mydomain,dc=intranet",
                "id": "alexpower",
                "objectType": "users/user",
                "options": {
                    "pki": false
                },
                "policies": {
                    "policies/desktop": [],
                    "policies/pwhistory": [],
                    "policies/umc": []
                },
                "position": "cn=users,dc=mydomain,dc=intranet",
                "properties": {
                    "birthday": null,
                    "city": null,
                    "country": null,
                    "departmentNumber": [],
                    "description": null,
                    "disabled": false,
                    "displayName": "Alex Power",
                    "e-mail": [],
                    "employeeNumber": null,
                    "employeeType": null,
                    "firstname": "Alex",
                    "gecos": "Alex Power",
                    "gidNumber": 5001,
                    "groups": [
                        "cn=Domain Users,cn=groups,dc=mydomain,dc=intranet"
                    ],
                    "homePostalAddress": [],
                    "homeShare": null,
                    "homeSharePath": "alexpower",
                    "homeTelephoneNumber": [],
                    "homedrive": null,
                    "jpegPhoto": null,
                    "lastname": "Power",
                    "locked": false,
                    "lockedTime": "0",
                    "mailAlternativeAddress": [],
                    "mailForwardAddress": [],
                    "mailForwardCopyToSelf": "0",
                    "mailHomeServer": null,
                    "mailPrimaryAddress": null,
                    "mobileTelephoneNumber": [],
                    "objectFlag": [],
                    "organisation": null,
                    "overridePWHistory": null,
                    "overridePWLength": null,
                    "pagerTelephoneNumber": [],
                    "password": null,
                    "passwordexpiry": null,
                    "phone": [],
                    "postcode": null,
                    "preferredLanguage": null,
                    "primaryGroup": "cn=Domain Users,cn=groups,dc=mydomain,dc=intranet",
                    "profilepath": null,
                    "pwdChangeNextLogin": null,
                    "roomNumber": [],
                    "sambaLogonHours": null,
                    "sambaPrivileges": [],
                    "sambaRID": 5018,
                    "sambaUserWorkstations": [],
                    "sambahome": null,
                    "scriptpath": null,
                    "secretary": [],
                    "serviceprovider": [],
                    "shell": "/bin/bash",
                    "street": null,
                    "title": null,
                    "uidNumber": 2009,
                    "umcProperty": {},
                    "unixhome": "/home/alexpower",
                    "unlock": false,
                    "unlockTime": "",
                    "userexpiry": null,
                    "username": "alexpower"
                },
                "uri": "http://10.200.28.110/univention/udm/users/user/uid%3Dalexpower%2Ccn%3Dusers%2Cdc%3Dmydomain%2Cdc%3Dintranet"
            }
        ]
    },
    "results": 1
}
					</programlisting>
				</para>
			</section>
			<section id="udm:rest_api:usage_examples:put">
				<title>Modify a user via a PUT request</title>
				<para>
					To modify a user you first get the current state of the user.
					To prevent modification conflicts you also have to get the entity tag (<wordasword>Etag</wordasword>) of the user resource.
					The <wordasword>Etag</wordasword> can be found in the response headers; it is used to identify a specific version of a resource.
					<programlisting language="sh">
curl -X GET -H "Accept: application/json" --dump-header user.headers \
  https://${USER}:${PASSWORD}@${FQHN}/univention/udm/users/user/&lt;dn&gt; |
  python -m json.tool > user.json
					</programlisting>
					<note>
						<para>
							&lt;dn&gt; should be URL encoded.
						</para>
					</note>
				</para>
				<para>
					Now you can edit the user in the <filename>user.json</filename> file to your liking.
					After you are done, send the changed <filename>user.json</filename> via a <command>PUT</command> request to modify the user.
					To avoid modification conflicts it is required to send the value of the <wordasword>Etag</wordasword> header, which you saved earlier in the <filename>user.headers</filename> file, as the value for the <property>If-Match</property> header.
					<programlisting language="sh">
curl -X PUT -H "Accept: application/json" -H "Content-Type: application/json" -H 'If-Match: "&lt;Etag&gt;"' \
  "https://${USER}:${PASSWORD}@${FQHN}/univention/udm/users/user/&lt;dn&gt;" --data @user.json
					</programlisting>
					<note>
						<para>
							&lt;dn&gt; should be URL encoded.
						</para>
						<para>
							The quotes around the <wordasword>Etag</wordasword> are required.
						</para>
					</note>
				</para>
			</section>
			<section id="udm:rest_api:usage_examples:delete">
				<title>Delete a user via a DELETE request</title>
				<para>
					To delete a user you just have to send a <command>DELETE</command> request to <uri>/univention/udm/users/user/&lt;dn&gt;</uri>
					<programlisting language="sh">
curl -X DELETE http://${USER}:${PASSWORD}@${FQHN}/univention/udm/users/user/&lt;dn&gt;
					</programlisting>
					<note>
						<para>
							&lt;dn&gt; should be URL encoded.
						</para>
					</note>
				</para>
			</section>
		</section>
	</section>

	<section id="udm:python-migration">
		<title>UCS 5.0: Python 3 Migration of modules and extensions
			<indexterm><primary>Python 3</primary><secondary>Migration</secondary></indexterm>
		</title>
		<para>
			UCS 5.0 switched from Python 2 to Python 3.
			This also affects &ucsUDM;.
			Starting with UCS 5.0 the modules and extensions like syntax classes and hooks must be compatible with both Python versions to ensure easier transition.
			Python 2 will be removed completely with UCS 5.1.
			This chapter describes important aspects of the migration as well as changes to the API.
		</para>

		<section id="udm:python-migration:compatibility"><title>Compatibility with UCS 4.4</title>
			<para>
				Most changes proposed in this chapter are compatible with UCS 4.4.
				One exception is the registration of the mapping encoding.
				The changes suggested here should already be included in the UDM modules for UCS 4.4 to make the update easier.
				The changes suggested here should already be included for UCS 4.4.
				Otherwise the update to UCS 5.0 may be problematic.
				Apps that still install UDM modules under UCS 4.4, while the Primary Node may already be UCS 5, must also contain the customizations in the UDM modules or
				register 2 different variants, otherwise the app will not be displayed on the Primary Node in &ucsUMC; / &ucsUDM;, for example.
			</para>
			<para>
				For the registration of UDM extensions the parameters to specify the compatible starting and end UCS version are now mandatory.
				While a Join script looked like:
				<programlisting language="bash"><![CDATA[
. /usr/share/univention-lib/ldap.sh

ucs_registerLDAPExtension "$@" \
	--udm_module /usr/lib/python3/dist-packages/univention/admin/handlers/foo/bar.py
				]]></programlisting>

				it may now specify the compatible UCS versions:
				<programlisting language="bash"><![CDATA[
. /usr/share/univention-lib/ldap.sh

ucs_registerLDAPExtension "$@" \
	--ucsversionstart "4.4-0" --ucsversionend "5.99-0" \
	--udm_module /usr/lib/python3/dist-packages/univention/admin/handlers/foo/bar.py
				]]></programlisting>

				or registers two separate versions compatible for each UCS version:
				<programlisting language="bash"><![CDATA[
. /usr/share/univention-lib/ldap.sh

ucs_registerLDAPExtension "$@" \
	--ucsversionstart "4.4-0" --ucsversionend "4.99-0" \
	--udm_module /usr/lib/python2.7/dist-packages/univention/admin/handlers/foo/bar.py

ucs_registerLDAPExtension "$@" \
	--ucsversionstart "5.0-0" --ucsversionend "5.99-0" \
	--udm_module /usr/lib/python3/dist-packages/univention/admin/handlers/foo/bar.py
				]]></programlisting>
			</para>
		</section>

		<section id="udm:python-migration:default-option"><title>Default option</title>
			<para>
				If not already present the module should define a <literal>default</literal> &ucsUDM; option:
				<programlisting language="python"><![CDATA[
options = {
    'default': univention.admin.option(
        short_description=short_description,
        default=True,
        objectClasses=['top', 'objectClassName'],
    )
}
class object(...):
    ...
				]]></programlisting>
				This enables generic functionality like automatic creation of search filters, automatic identification of objects and obsoletes the need to create the add-list manually.
			</para>
		</section>

		<section id="udm:python-migration:mapping-functions"><title>Mapping functions</title>
			<para>
				The <function>unmap</function> functions must decode the given list of <type>byte</type> strings (<type>bytes</type>) into <type>unicode</type> strings (<type>str</type>).
				The <function>map</function> functions must encode the result of the <function>unmap</function> functions (e.g. <type>unicode</type> strings <type>str</type>) into a list of <type>byte</type> strings (<type>bytes</type>).
				Both functions have a new optional parameter <parameter>encoding</parameter>, which is a tuple consisting of the encoding (defaulting to <literal>UTF-8</literal>) and the error handling in case de/encoding fails (defaulting to <literal>strict</literal>).
			</para>
			<para>
				Old UCS 4 code most often looked like:
				<programlisting language="python"><![CDATA[
def map_function(value):
    return [value]


def unmap_function(value):
    return value[0]


mapping.register('property', 'attribute', map_function, unmap_function)
				]]></programlisting>

				In UCS 5.0 the code has to look like:
				<programlisting language="python"><![CDATA[
def map_function(
    value: Union[Text, Sequence[Text]],
    encoding: Optional[Tuple[str, str]] = None,
) -> List[bytes]:
    return [value.encode(*encoding)]


def unmap_function(
    value: Sequence[bytes],
    encoding: Optional[Tuple[str, str]] = None,
) -> Text:
    return value[0].decode(*encoding)


mapping.register('property', 'attribute', map_function, unmap_function)
				]]></programlisting>
			</para>
		</section>
		<section id="udm:python-migration:mapping-encoding"><title>Mapping Encoding</title>
			<warning><para>
				Specifying the mapping encoding is incompatible with UCS 4.4.
			</para></warning>

			<para>
				The registration of the mapping of LDAP attributes to &ucsUDM; properties now has to specify the correct encoding explicitly.
				The default encoding used is <literal>UTF-8</literal>.
				As most LDAP data is stored in <literal>UTF-8</literal> the encoding parameter can be left out for most properties.
			</para>
			<para>
				The encoding can simply be specified in the registration of a mapping:
				<programlisting language="python"><![CDATA[
mapping.register('property', 'attribute', map_function, unmap_function, encoding='ASCII')
				]]></programlisting>
			</para>
			<para>
				The encoding depends on the LDAP syntax of the corresponding LDAP attribute.
				Syntaxes storing binary data should either be specified as <literal>ISO8859-1</literal> or preferably should be decoded to an <literal>ASCII</literal> representation of <literal>base64</literal> via <function>univention.admin.mapping.mapBase64</function> and <function>univention.admin.mapping.unmapBase64</function>.
				The attributes of the following syntaxes e.g. should be set to <literal>ASCII</literal> as they consist of ASCII only characters or a subset of ASCII (e.g. numbers).
				<itemizedlist>
					<listitem><para>IA5 String (1.3.6.1.4.1.1466.115.121.1.26)</para></listitem>
					<listitem><para>Integer (1.3.6.1.4.1.1466.115.121.1.27)</para></listitem>
					<listitem><para>Printable String (1.3.6.1.4.1.1466.115.121.1.44)</para></listitem>
					<listitem><para>Boolean (1.3.6.1.4.1.1466.115.121.1.7)</para></listitem>
					<listitem><para>Numeric String (1.3.6.1.4.1.1466.115.121.1.36)</para></listitem>
					<listitem><para>Generalized Time (1.3.6.1.4.1.1466.115.121.1.24)</para></listitem>
					<listitem><para>Telephone Number (1.3.6.1.4.1.1466.115.121.1.50)</para></listitem>
					<listitem><para>UUID (1.3.6.1.1.16.1)</para></listitem>
					<listitem><para>Authentication Password (1.3.6.1.4.1.4203.1.1.2)</para></listitem>
				</itemizedlist>

				To find out the syntax of an LDAP attribute programmatically e.g. for the attribute <literal>gecos</literal>:
				<programlisting language="bash">
python -c '
from univention.uldap import getMachineConnection
from ldap.schema import AttributeType
conn = getMachineConnection()
schema = conn.get_schema()
attr = schema.get_obj(AttributeType, "gecos")
print(atttr.syntax)'
				</programlisting>
			</para>
		</section>

		<section id="udm:python-migration:open"><title><function>object.open()</function> / <function>object._post_unmap()</function></title>
			<para>
				LDAP attributes contained in <varname>self.oldattr</varname> are usually transformed into property values (in <varname>self.info</varname>) by the mapping functions.
				In some cases this cannot be done automatically.
				Instead this is done manually in the methods <function>open()</function> or <function>_post_unmap()</function>.
				These functions must consider transforming <type>byte</type> strings (<type>bytes</type> in <varname>self.oldattr</varname>) into <type>unicode</type> strings (<type>str</type> in <varname>self.info</varname>).
			</para>
		</section>

		<section id="udm:python-migration:haskey"><title><function>object.has_key()</function></title>
			<para>
				The method <function>has_key()</function> has been renamed into <function>has_property()</function>.
				The method <function>has_property()</function> is already present in UCS 4.4.
			</para>
		</section>

		<section id="udm:python-migration:identify"><title><function>identify()</function></title>
			<para>
				The <function>identify()</function> function must now consider that the given attribute values are <type>byte</type> strings.
				The code prior looked like:
				<programlisting language="python"><![CDATA[
def identify(dn, attr, canonical=False):
    return 'objectClassName' in attr.get('objectClass', [])
				]]></programlisting>

				In UCS 5.0 the code have to look like:
				<programlisting language="python"><![CDATA[
class object(...):
    ...
    @classmethod
    def identify(cls, dn, attr, canonical=False):
        return b'objectClassName' in attr.get('objectClass', [])


identify = object.identify
				]]></programlisting>

				In most cases the <function>identify()</function> function only checks for the existence of a specific LDAP <classname>objectClass</classname>.
				The generic implementation can be used instead, which requires the  <literal>default</literal> UDM option to be set:
				<programlisting language="python"><![CDATA[
options = {
    'default': univention.admin.option(
        short_description=short_description,
        default=True,
        objectClasses=['top', 'objectClassName'],
    )
}
class object(...):
    ...


identify = object.identify
				]]></programlisting>
			</para>
		</section>

		<section id="udm:python-migration:modlist"><title><function>_ldap_modlist()</function></title>
			<para>
				The methods <function>_ldap_modlist()</function> and <function>_ldap_addlist()</function> now must insert <type>byte</type> strings into the add/modlist.

				The code prior looked like:
				<programlisting language="python"><![CDATA[
class object(...):
    ...
    def _ldap_addlist(al):
        al = super(object, self)._ldap_addlist(al)
        al.append(('objectClass', ['top', 'objectClassName']))
        return al

    def _ldap_modlist(ml):
        ml = super(object, self)._ldap_modlist(ml)
        value = ...
        new = [value]
        ml.append(('attribute', self.oldattr.get('attribute', []), new))
        return ml
				]]></programlisting>

				In UCS 5.0 the code have to look like:
				<programlisting language="python"><![CDATA[
class object(...):
    ...
    def _ldap_addlist(al):
        al = super(object, self)._ldap_addlist(al)
        al.append(('objectClass', [b'top', b'objectClassName']))
        return al

    def _ldap_modlist(ml):
        ml = super(object, self)._ldap_modlist(ml)
        value = ...
        new = [value.encode('UTF-8')]
        ml.append(('attribute', self.oldattr.get('attribute', []), new))
        return ml
				]]></programlisting>

			The <function>_ldap_addlist()</function> is mostly not needed and should be replaced by specifying a default option (see above).
			</para>
		</section>

		<section id="udm:python-migration:lookup"><title>lookup()</title>
			<para>
				The <function>lookup()</function> should be replaced by specifying a default option as described above.
				The class method <function>rewrite_filter()</function> can be used to add additional filter rules.
			</para>
		</section>

		<section id="udm:python-migration:syntax"><title>Syntax classes</title>
			<para>
				Syntax classes now must ensure to return <type>unicode</type> strings.
			</para>
		</section>

		<section id="udm:python-migration:hooks"><title>Hooks</title>
			<para>
				For hooks the same rules as in <function>_ldap_modlist()</function> apply.
			</para>
		</section>
	</section>

	<!-- <section id="udm:acl"> -->
	<!-- 	<title>LDAP Access Control Lists -->
	<!-- 		<indexterm><primary>LDAP</primary><secondary>ACL</secondary></indexterm> -->
	<!-- 	</title> -->
	<!-- 	<remark>SG: might be too much</remark> -->
	<!-- 	<remark>PMH: but needed by us</remark> -->
	<!-- 	<para> -->
	<!-- 		OpenLDAP ACLs: break, continue, ... -->
	<!-- 	</para> -->
	<!-- </section> -->

	<!-- <section id="udm:ldap:common-attributes"> -->
	<!-- 	<title>Common LDAP Attributes -->
	<!-- 		<indexterm><primary>LDAP</primary><secondary>attributes</secondary></indexterm> -->
	<!-- 	</title> -->
	<!-- 	<para> -->
	<!-- 		Do not re-invent the wheel, use existing LDAP attributes. -->
	<!-- 	</para> -->
	<!-- </section> -->

</chapter>
<!-- vim:set ft=docbk ts=2 sw=2 noet: -->
