#!/usr/bin/python2.7
"""
Configure UCS-domain and forward DNS servers.
"""
# Copyright 2016-2021 Univention GmbH
#
# https://www.univention.de/
#
# All rights reserved.
#
# The source code of this program is made available
# under the terms of the GNU Affero General Public License version 3
# (GNU AGPL V3) as published by the Free Software Foundation.
#
# Binary versions of this program provided by Univention to you as
# well as other copyrighted, protected or trademarked materials like
# Logos, graphics, fonts, specific documentations and configurations,
# cryptographic keys etc. are subject to a license agreement between
# you and Univention and not subject to the GNU AGPL V3.
#
# In the case you use this program under the terms of the GNU AGPL V3,
# the program is provided in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public
# License with the Debian GNU/Linux or Univention distribution in file
# /usr/share/common-licenses/AGPL-3; if not, see
# <https://www.gnu.org/licenses/>.

from __future__ import absolute_import

from os import environ
from sys import stderr, exit
from collections import OrderedDict
from subprocess import check_output, check_call, CalledProcessError
from optparse import OptionParser, SUPPRESS_HELP, Values
from logging import getLogger, basicConfig, DEBUG, INFO, WARNING, ERROR

from univention.config_registry import ConfigRegistry
from univention.config_registry.frontend import ucr_update
from univention.config_registry.interfaces import Interfaces
from DNS import DnsRequest, SocketError, TimeoutError
from ipaddress import ip_address, IPv4Address, IPv6Address

try:
	from typing import Union, Dict, Optional
	IPAddress = Union[IPv4Address, IPv6Address]
	DictAddr2Str = Dict[IPAddress, Optional[str]]
except ImportError:  # pragma: no cover
	pass

UCR_VARS_FWD = ['dns/forwarder%d' % (i,) for i in range(1, 4)]
UCR_VARS_DNS = ['nameserver%d' % (i,) for i in range(1, 4)]
LOCAL = '127.0.0.1'  # or ::1 for IPv6


options = Values()


def main():  # type: () -> None
	global options
	options = parse_args()
	setup_logging()
	log = getLogger(__name__)

	if options.run_tests:
		run_tests()

	ucr = ConfigRegistry()
	ucr.load()
	if ucr.is_true('nameserver/external'):
		log.fatal('Using external DNS - aborting')
		exit(0)

	nameservers = OrderedDict()  # type: DictAddr2Str
	forwarders = OrderedDict()  # type: DictAddr2Str
	need_fixing = get_nameservers_cli(nameservers)
	need_fixing |= get_forwarders(forwarders, ucr)
	need_fixing |= get_nameservers_ucr(nameservers, ucr)
	need_fixing |= validate_servers(nameservers, forwarders, ucr['domainname'])
	need_fixing |= either_or(nameservers, forwarders)
	need_fixing |= not nameservers
	need_fixing |= options.force_self
	if not need_fixing:
		log.info("No action required.")
		return
	add_self(nameservers, ucr)
	add_nameservers(nameservers, ucr['domainname'])
	add_master(nameservers, ucr['ldap/master'])

	if not nameservers:
		log.fatal('No nameserver remains - aborting')
		exit(1)

	update_ucr(ucr, nameservers, forwarders)


def parse_args():  # type: () -> Values
	usage = '%prog [options]'
	description = __doc__
	parser = OptionParser(usage=usage, description=description)
	parser.add_option(
		'--verbose', '-v',
		action='count', default=2,
		help='Increase verbosity')
	parser.add_option(
		'--no-act', '-d',
		action='store_true',
		help='Enable dry-run mode')
	parser.add_option(
		'--ipv6', '-6',
		action='store_const', const=('A', 'AAAA'), default=('A',), dest='rrtyp',
		help='Also add IPv6 addresses')
	parser.add_option(
		'--no-self', '-S',
		action='store_true',
		help='Do not add self as name-server')
	parser.add_option(
		'--force-self', '-f',
		action='store_true', default=False,
		help='Force adding self as name-server')
	parser.add_option(
		'--add-master', '-m',
		action='store_true',
		help='Add domaincontroller_master as name-server')
	parser.add_option(
		'--add-nameservers', '-n',
		action='store_true',
		help='Add other name-servers')
	parser.add_option(
		'--no-validation', '-V',
		action='store_true',
		help='Do not validate DNS servers')
	parser.add_option(
		'--xor', '-x',
		action='store_true',
		help='Remove name-servers from forwarders')
	parser.add_option(
		'--run-tests',
		action='store_true',
		help=SUPPRESS_HELP)
	parser.add_option(
		'--no-ucr',
		action='store_true',
		help='Do not load nameservers and forwarders from UCR variables')
	parser.add_option(
		'--dnsserver',
		action="append",
		dest="dnsservers",
		type="str",
		default=[],
		help='Specify nameserver delivered e.g. via DHCP. May be specified multiple times.')

	options, args = parser.parse_args()
	if args:
		parser.error('No argument expected')

	if options.no_self and options.force_self:
		parser.error('--no-self and --force-self are mutually exclusive.')

	return options


def setup_logging():  # type: () -> None
	FORMAT = '%(asctime)-15s %(levelname)-7s %(name)-17s %(message)s'
	LEVELS = [ERROR, WARNING, INFO, DEBUG]
	try:
		level = LEVELS[options.verbose]
	except IndexError:
		level = LEVELS[-1]
	basicConfig(format=FORMAT, level=level, stream=stderr)


def get_nameservers_cli(nameservers):  # type: (DictAddr2Str) -> bool
	log = getLogger(__name__).getChild('cli/ns')
	log.debug('Reading UCS domain servers from CLI...')

	need_fixing = False
	for ns in options.dnsservers:
		dns = ip_address(u'%s' % (ns,))
		log.info('Added server %s via CLI argument', dns)
		nameservers[dns] = None

	return need_fixing

def get_forwarders(forwarders, ucr):  # type: (DictAddr2Str, Dict[str, str]) -> bool
	log = getLogger(__name__).getChild('ucr/fwd')
	if options.no_ucr:
		log.info('Skip reading forwarders from UCR')
		return False
	log.debug('Reading external DNS forwarders from UCR...')

	need_fixing = False
	for var in UCR_VARS_FWD:
		fwd_str = ucr.get(var, '').strip()
		if not fwd_str:
			continue
		fwd = ip_address(u'%s' % (fwd_str,))
		if is_self(fwd):
			log.error("Dropping local address %s from UCRV %s", fwd, var)
			need_fixing = True
			continue
		log.info('Found forwarder %s from UCRV %s', fwd, var)
		forwarders[fwd] = None

	return need_fixing


def get_nameservers_ucr(nameservers, ucr):  # type: (DictAddr2Str, Dict[str, str]) -> bool
	log = getLogger(__name__).getChild('ucr/ns')
	if options.no_ucr:
		log.info('Skip reading nameservers from UCR')
		return False
	log.debug('Reading UCS domain servers from UCR...')

	need_fixing = False
	for var in UCR_VARS_DNS:
		ns = ucr.get(var, '').strip()
		if not ns:
			continue
		dns = ip_address(u'%s' % (ns,))
		log.info('Found server %s from UCRV %s', dns, var)
		nameservers[dns] = None

	return need_fixing


def validate_servers(nameservers, forwarders, domain):  # type: (DictAddr2Str, DictAddr2Str, str) -> bool
	log = getLogger(__name__).getChild('val')
	if options.no_validation:
		log.info('Skip validation of DNS servers')
		return False
	log.debug('Validating UCS domain servers...')

	need_fixing = False
	for server in nameservers:
		try:
			if query_master_src_record(domain, server):
				log.info('Validated UCS domain server: %s', server)
			else:
				log.warn('UCS Primary Directory Node SRV record is unknown at %s, converting into forwarder', server)
				need_fixing = True
				del nameservers[server]
				forwarders[server] = None
		except (SocketError, TimeoutError) as exc:
			log.warn('Connection check to %s (%s) failed, maybe down?!', server, exc.args[0])
			log.info('Leaving it configured as nameserver anyway')

	return need_fixing


def either_or(nameservers, forwarders):  # type: (DictAddr2Str, DictAddr2Str) -> bool
	log = getLogger(__name__).getChild('xor')
	if not options.xor:
		log.info('Skip removing nameservers from forwarders')
		return False
	log.info('Removing UCS domain servers from forwarders...')

	need_fixing = False
	unique = object()
	for server in nameservers:
		if forwarders.pop(server, unique) is not unique:
			log.info('Removed UCS domain server %s from forwarders', server)
			need_fixing = True

	return need_fixing


def add_self(nameservers, ucr):  # type: (DictAddr2Str, Dict[str, str]) -> None
	log = getLogger(__name__).getChild('ucr/self')
	if options.no_self:
		log.info('Skip adding self')
		return

	if any(is_self(addr) for addr in nameservers):
		log.info('Already using self')
		return

	iface = Interfaces(ucr)
	mynet = iface.get_default_ip_address()
	myself = mynet.ip
	log.info('Default IP address configured in UCR: %s', myself)

	domain = ucr['domainname']
	if not options.force_self and not query_master_src_record(domain, myself):
		log.warn('Failed to query local server %s for %s', myself, domain)
		if nameservers:
			return
		log.warn('Adding anyway as no other nameserer remains.')

	old = nameservers.items()
	nameservers.clear()
	nameservers[myself] = None
	nameservers.update(old)


def add_nameservers(nameservers, domain):  # type: (DictAddr2Str, str) -> None
	log = getLogger(__name__).getChild('ns')
	if not options.add_nameservers:
		log.info('Skip adding NS')
		return

	log.debug('Querying %s for additional NS records in %s', LOCAL, domain)
	r = DnsRequest(domain, qtype='NS', server=[LOCAL], aa=1, rd=0).req()
	log.debug('header=%r', r.header)

	if r.header['status'] == 'NOERROR' and r.header['aa']:
		names = set(rr['data'] for rr in r.answers)
		log.debug('servers=%r', names)
		for rr in r.additional:
			log.debug('rr=%r', rr)
			name = rr['name']
			if rr['typename'] in options.rrtyp and name in names:
				ip = get_ip(rr)
				if is_self(ip):
					log.info('Skipping local interface address %s found for NS record %s', ip, name)
					continue
				log.info('Adding server found in NS: %s=%s', name, ip)
				nameservers[ip] = None
				names.remove(name)
	else:
		log.error('DNS lookup of NS records in %s against %s failed', domain, LOCAL)


def add_master(nameservers, master):  # type: (DictAddr2Str, str) -> None
	log = getLogger(__name__).getChild('ldap')
	if not options.add_master:
		log.info('Skip adding Primary Directory Node')
		return

	log.debug('Querying %s for address of Primary Directory Node %s', LOCAL, master)
	r = DnsRequest(master, qtype='ANY', server=[LOCAL], aa=1, rd=0).req()
	log.debug('header=%r', r.header)

	if r.header['status'] == 'NOERROR' and r.header['aa']:
		for rr in r.answers:
			log.debug('rr=%r', rr)
			if rr['typename'] in options.rrtyp:
				ip = get_ip(rr)
				if is_self(ip):
					log.info('Skipping local interface address %s found for ldap/master %s', ip, master)
					continue
				log.info('Adding Primary Directory Node %s', ip)
				nameservers[ip] = None
				break
	else:
		log.error('DNS lookup of %s against %s failed', master, LOCAL)


def update_ucr(ucr, nameservers, forwarders):  # type: (Dict[str, str], DictAddr2Str, DictAddr2Str) -> None
	log = getLogger(__name__).getChild('ucr')
	new_ucr_settings = {}

	def update(names, input_values, typ):  # type: (List[str], DictAddr2Str, str) -> None
		log.debug('%s=%r', typ, input_values)
		values = ['%s' % (val,) for val in input_values]  # type: List[Optional[str]]
		diff = len(names) - len(values)
		if diff > 0:
			values += [None] * diff
		elif diff < 0:
			log.warn('Skipping extra %s: %r', typ, values[len(names):])
		new_ucr_settings.update(dict(zip(names, values)))

	update(UCR_VARS_FWD, forwarders, 'forwarders')
	update(UCR_VARS_DNS, nameservers, 'nameservers')
	log.info('Updating %r', new_ucr_settings)

	if not options.no_act:
		for (key, val) in sorted(new_ucr_settings.iteritems()):
			old = ucr.get(key)
			if old != val:
				log.info('Updating %r: %r -> %r', key, old, val)

		ucr_update(ucr, new_ucr_settings)

		log.info('Reloading BIND')
		check_call(('rndc', 'reconfig'))


def query_master_src_record(domain, server):  # type: (str, IPAddress) -> Union[bool, str]
	log = getLogger(__name__).getChild('dns/srv')

	rec = '_domaincontroller_master._tcp.%s.' % (domain.rstrip('.'),)
	log.debug('Querying %s for SRV %s', server, rec)

	req = DnsRequest(rec, qtype='SRV', server=['%s' % (server,)], aa=1, rd=0)
	res = req.req()
	log.debug('header=%r', res.header)

	return res.header['status'] == 'NOERROR' and res.header['aa']  # type: ignore


def get_ip(rr):  # type: (Dict[str, str]) -> IPAddress
	r"""
	>>> get_ip({'typename': 'A', 'data': '127.0.0.1'})
	IPv4Address('127.0.0.1')
	>>> get_ip({'typename': 'AAAA', 'data': '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01'})
	IPv6Address('::1')
	"""
	typ, data = rr['typename'], rr['data']
	if typ == 'A':
		return ip_address(u'%s' % (data,))  # type: ignore
	elif typ == 'AAAA':
		# Work-around bug in python-pydns, which does not unpack IPv6 addresses
		assert len(data) == 16
		if not isinstance(data, bytes):
			data = bytes(data, 'charmap')
		return ip_address(data)  # type: ignore
	else:
		raise TypeError(typ)


def is_self(addr):  # type: (Union[str, IPv4Address, IPv6Address]) -> bool
	"""
	>>> is_self('127.0.0.1')
	True
	>>> is_self('::1')
	True
	>>> is_self('8.8.8.8')
	False
	>>> is_self('0.0.0.1')
	False
	"""
	log = getLogger(__name__).getChild('ip')

	env = dict(environ)
	env['LC_ALL'] = 'C'
	cmd = ['ip', 'route', 'get', '%s' % addr]
	log.debug('calling %r', cmd)
	try:
		out = check_output(cmd, env=env)
		return out.startswith('local ')
	except CalledProcessError as ex:
		log.warn('Failed to determine route: %s', ex)
		return False


def run_tests():  # type: () -> None
	import doctest
	doctest.testmod()


if __name__ == '__main__':
	main()
